# PySNMP SMI module. Autogenerated from smidump -f python ZXTM-MIB-SMIv2
# by libsmi2pysnmp-0.1.3 at Thu May 14 16:26:44 2015,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "enterprises")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

zeus = MibIdentifier((1, 3, 6, 1, 4, 1, 7146))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1))
zxtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 7146, 1, 2)).setRevisions(("2014-10-29 11:00","2014-09-21 10:00","2014-08-19 12:00","2014-07-01 14:00","2014-02-24 17:00","2014-02-03 16:00","2014-02-03 11:00","2013-11-11 11:00","2011-11-22 11:00",))
if mibBuilder.loadTexts: zxtm.setOrganization("Riverbed Technology (Stingray Team)")
if mibBuilder.loadTexts: zxtm.setContactInfo("http://www.riverbed.com/us/support/")
if mibBuilder.loadTexts: zxtm.setDescription("DNS Server traps")
globals = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1))
version = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setDescription("The Stingray Traffic Manager version.")
numberChildProcesses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberChildProcesses.setDescription("The number of traffic manager child processes.")
upTime = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setDescription("The time (in hundredths of a second) that Stingray software has been\noperational for (this value will wrap if it has been running for more\nthan 497 days).")
timeLastConfigUpdate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeLastConfigUpdate.setDescription("The time (in hundredths of a second) since the configuration of\ntraffic manager was updated (this value will wrap if no\nconfiguration changes are made for 497 days).")
totalBytesInLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesInLo.setDescription("Bytes received by the traffic manager from clients ( low 32bits ).")
totalBytesInHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesInHi.setDescription("Bytes received by the traffic manager from clients ( high 32bits ).")
totalBytesOutLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOutLo.setDescription("Bytes sent by the traffic manager to clients ( low 32bits ).")
totalBytesOutHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOutHi.setDescription("Bytes sent by the traffic manager to clients ( high 32bits ).")
totalCurrentConn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCurrentConn.setDescription("Number of TCP connections currently established.")
totalConn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalConn.setDescription("Total number of TCP connections received.")
numberDNSARequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSARequests.setDescription("Requests for DNS A records (hostname->IP address) made by the traffic manager.")
numberDNSACacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSACacheHits.setDescription("Requests for DNS A records resolved from the traffic manager's local cache.")
numberDNSPTRRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSPTRRequests.setDescription("Requests for DNS PTR records (IP address->hostname) made by the traffic manager.")
numberDNSPTRCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSPTRCacheHits.setDescription("Requests for DNS PTR records resolved from the traffic manager's local cache.")
numberSNMPUnauthorisedRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPUnauthorisedRequests.setDescription("SNMP requests dropped due to access restrictions.")
numberSNMPBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPBadRequests.setDescription("Malformed SNMP requests received.")
numberSNMPGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetRequests.setDescription("SNMP GetRequests received.")
numberSNMPGetNextRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetNextRequests.setDescription("SNMP GetNextRequests received.")
sslCipherEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherEncrypts.setDescription("Bytes encrypted with a symmetric cipher.")
sslCipherDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDecrypts.setDescription("Bytes decrypted with a symmetric cipher.")
sslCipherRC4Encrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRC4Encrypts.setDescription("Bytes encrypted with RC4.")
sslCipherRC4Decrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRC4Decrypts.setDescription("Bytes decrypted with RC4.")
sslCipherDESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDESEncrypts.setDescription("Bytes encrypted with DES.")
sslCipherDESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDESDecrypts.setDescription("Bytes decrypted with DES.")
sslCipher3DESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipher3DESEncrypts.setDescription("Bytes encrypted with 3DES.")
sslCipher3DESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipher3DESDecrypts.setDescription("Bytes decrypted with 3DES.")
sslCipherAESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESEncrypts.setDescription("Bytes encrypted with AES.")
sslCipherAESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESDecrypts.setDescription("Bytes decrypted with AES.")
sslCipherRSAEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSAEncrypts.setDescription("Number of RSA encrypts.")
sslCipherRSADecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSADecrypts.setDescription("Number of RSA decrypts.")
sslCipherRSADecryptsExternal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSADecryptsExternal.setDescription("Number of external RSA decrypts.")
sslHandshakeSSLv2 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeSSLv2.setDescription("Number of SSLv2 handshakes.")
sslHandshakeSSLv3 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeSSLv3.setDescription("Number of SSLv3 handshakes.")
sslHandshakeTLSv1 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv1.setDescription("Number of TLSv1.0 handshakes.")
sslClientCertNotSent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertNotSent.setDescription("Number of times a client certificate was required but not supplied.")
sslClientCertInvalid = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertInvalid.setDescription("Number of times a client certificate was invalid.")
sslClientCertExpired = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertExpired.setDescription("Number of times a client certificate has expired.")
sslClientCertRevoked = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertRevoked.setDescription("Number of times a client certificate was revoked.")
sslSessionIDMemCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDMemCacheHit.setDescription("Number of times the SSL session id was found in the cache and reused.")
sslSessionIDMemCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDMemCacheMiss.setDescription("Number of times the SSL session id was not found in the cache.")
sslSessionIDDiskCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDDiskCacheHit.setDescription("Number of times the SSL session id was found in the disk cache and reused (deprecated, will always return 0).")
sslSessionIDDiskCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDDiskCacheMiss.setDescription("Number of times the SSL session id was not found in the disk cache (deprecated, will always return 0).")
sslHandshakeTLSv11 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv11.setDescription("Number of TLSv1.1 handshakes.")
sslConnections = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslConnections.setDescription("Number of SSL connections negotiated.")
sysCPUIdlePercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUIdlePercent.setDescription("Percentage of time that the CPUs are idle.")
sysCPUBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUBusyPercent.setDescription("Percentage of time that the CPUs are busy.")
sysCPUUserBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUUserBusyPercent.setDescription("Percentage of time that the CPUs are busy running user-space code.")
sysCPUSystemBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUSystemBusyPercent.setDescription("Percentage of time that the CPUs are busy running system code.")
sysFDsFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFDsFree.setDescription("Number of free file descriptors.")
sysMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemTotal.setDescription("Total memory (MBytes).")
sysMemFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemFree.setDescription("Free memory (MBytes).")
sysMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemInUse.setDescription("Memory used (MBytes).")
sysMemBuffered = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemBuffered.setDescription("Buffer memory (MBytes).")
sysMemSwapped = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemSwapped.setDescription("Amount of swap space in use (MBytes).")
sysMemSwapTotal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemSwapTotal.setDescription("Total swap space (MBytes).")
numIdleConnections = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIdleConnections.setDescription("Total number of idle HTTP connections to all nodes (used for future HTTP requests).")
sslCipherRSAEncryptsExternal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSAEncryptsExternal.setDescription("Number of external RSA encrypts.")
dataEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEntries.setDescription("Number of entries in the TrafficScript data.get()/set() storage.")
dataMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataMemoryUsage.setDescription("Number of bytes used in the TrafficScript data.get()/set() storage.")
eventsSeen = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsSeen.setDescription("Events seen by the traffic Manager's event handling process.")
totalDNSResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDNSResponses.setDescription("Total number of DNS response packets handled.")
totalBadDNSPackets = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBadDNSPackets.setDescription("Total number of malformed DNS response packets encountered from the backend servers.")
totalBackendServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBackendServerErrors.setDescription("Total errors returned from the backend servers.")
totalBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesIn.setDescription("Bytes received by the traffic manager from clients.")
totalBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOut.setDescription("Bytes sent by the traffic manager to clients.")
numberSNMPGetBulkRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetBulkRequests.setDescription("SNMP GetBulkRequests received.")
sslCipherDSASigns = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDSASigns.setDescription("Number of DSA signing operations.")
sslCipherDSAVerifies = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDSAVerifies.setDescription("Number of DSA verifications.")
sslHandshakeTLSv12 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv12.setDescription("Number of TLSv1.2 handshakes.")
sslCipherDHGenerates = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDHGenerates.setDescription("Number of Diffie Hellman keys generated.")
sslCipherDHAgreements = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDHAgreements.setDescription("Number of Diffie Hellman key agreements.")
sslCipherAESGCMEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESGCMEncrypts.setDescription("Bytes encrypted with AES-GCM.")
sslCipherAESGCMDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESGCMDecrypts.setDescription("Bytes decrypted with AES-GCM.")
totalRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests.setDescription("Total number of TCP requests received.")
totalTransactions = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalTransactions.setDescription("Total number of TCP requests being processed, after applying TPS limits.")
hourlyPeakBytesInPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakBytesInPerSecond.setDescription("The peak bytes received from clients per second in the last hour.")
hourlyPeakBytesOutPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakBytesOutPerSecond.setDescription("The peak bytes sent to clients per second in the last hour.")
hourlyPeakRequestsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakRequestsPerSecond.setDescription("The peak requests per second in the last hour.")
hourlyPeakSSLConnectionsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakSSLConnectionsPerSecond.setDescription("The peak ssl connections per second in the last hour.")
virtualservers = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2))
virtualserverNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverNumber.setDescription("The number of virtual servers.")
virtualserverTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2))
if mibBuilder.loadTexts: virtualserverTable.setDescription("This table gives information and statistics for the virtual\nservers the traffic manager is hosting.")
virtualserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: virtualserverEntry.setDescription("This defines a row in the virtual servers table.")
virtualserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverName.setDescription("The name of the virtual server.")
virtualserverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPort.setDescription("The port the virtual server listens on.")
virtualserverProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(18,9,23,10,16,20,19,3,2,22,12,17,11,4,6,5,1,7,13,8,14,15,21,)).subtype(namedValues=NamedValues(("http", 1), ("smtp", 10), ("ldap", 11), ("ldaps", 12), ("telnet", 13), ("sslforwarding", 14), ("udpstreaming", 15), ("udp", 16), ("dns", 17), ("genericserverfirst", 18), ("genericclientfirst", 19), ("https", 2), ("dnstcp", 20), ("sipudp", 21), ("siptcp", 22), ("rtsp", 23), ("ftp", 3), ("imaps", 4), ("imapv2", 5), ("imapv3", 6), ("imapv4", 7), ("pop3", 8), ("pop3s", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverProtocol.setDescription("The protocol the virtual server is operating.")
virtualserverDefaultTrafficPool = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDefaultTrafficPool.setDescription("The virtual server's default pool.")
virtualserverBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesInLo.setDescription("Bytes received by this virtual server from clients ( low 32bits ).")
virtualserverBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesInHi.setDescription("Bytes received by this virtual server from clients ( high 32bits ).")
virtualserverBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOutLo.setDescription("Bytes sent by this virtual server to clients ( low 32bits ).")
virtualserverBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOutHi.setDescription("Bytes sent by this virtual server to clients ( high 32bits ).")
virtualserverCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCurrentConn.setDescription("TCP connections currently established to this virtual server.")
virtualserverMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverMaxConn.setDescription("Maximum number of simultaneous TCP connections this virtual\nserver has processed at any one time.")
virtualserverTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalConn.setDescription("Requests received by this virtual server.")
virtualserverDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDiscard.setDescription("Connections discarded by this virtual server.")
virtualserverDirectReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDirectReplies.setDescription("Direct replies from this virtual server, without forwarding to a node.")
virtualserverConnectTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectTimedOut.setDescription("Connections closed by this virtual server because the 'connect_timeout'\ninterval was exceeded.")
virtualserverDataTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDataTimedOut.setDescription("Connections closed by this virtual server because the 'timeout'\ninterval was exceeded.")
virtualserverKeepaliveTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverKeepaliveTimedOut.setDescription("Connections closed by this virtual server because the 'keepalive_timeout'\ninterval was exceeded.")
virtualserverUdpTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverUdpTimedOut.setDescription("Connections closed by this virtual server because the 'udp_timeout'\ninterval was exceeded.")
virtualserverTotalDgram = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalDgram.setDescription("UDP datagrams processed by this virtual server.")
virtualserverGzip = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzip.setDescription("Responses which have been compressed by content compression.")
virtualserverGzipBytesSavedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSavedLo.setDescription("Bytes of network traffic saved by content compression ( low 32bits ).")
virtualserverGzipBytesSavedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSavedHi.setDescription("Bytes of network traffic saved by content compression ( high 32bits ).")
virtualserverHttpRewriteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpRewriteLocation.setDescription("HTTP Location headers, supplied by a node, that have been rewritten.")
virtualserverHttpRewriteCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpRewriteCookie.setDescription("HTTP Set-Cookie headers, supplied by a node, that have been rewritten.")
virtualserverHttpCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheHits.setDescription("HTTP responses sent directly from the web cache by this virtual server.")
virtualserverHttpCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheLookups.setDescription("HTTP requests that are looked up in the web cache by this virtual server.")
virtualserverHttpCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheHitRate.setDescription("Percentage hit rate of the web cache for this virtual server.")
virtualserverSIPTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverSIPTotalCalls.setDescription("Total number of SIP INVITE requests seen by this virtual server.")
virtualserverSIPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverSIPRejectedRequests.setDescription("Number of SIP requests rejected due to them exceeding the maximum amount of memory allocated to the connection.")
virtualserverConnectionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectionErrors.setDescription("Number of transaction or protocol errors in this virtual server.")
virtualserverConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectionFailures.setDescription("Number of connection failures in this virtual server.")
virtualserverBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesIn.setDescription("Bytes received by this virtual server from clients.")
virtualserverBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOut.setDescription("Bytes sent by this virtual server to clients.")
virtualserverGzipBytesSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSaved.setDescription("Bytes of network traffic saved by content compression.")
virtualserverCertStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCertStatusRequests.setDescription("Number of incoming TLS handshakes for this virtual server with certificate status requests.")
virtualserverCertStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCertStatusResponses.setDescription("Number of incoming TLS handshakes for this virtual server to which certificate status responses were attached.")
virtualserverMaxDurationTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverMaxDurationTimedOut.setDescription("Connections closed by this virtual server because the\n'max_transaction_duration' interval was exceeded.")
virtualserverProcessingTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverProcessingTimedOut.setDescription("Connections closed by this virtual server because the 'timeout'\ninterval was exceeded while waiting for rules or external processing.")
pools = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3))
poolNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumber.setDescription("The number of pools on this system.")
poolTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2))
if mibBuilder.loadTexts: poolTable.setDescription("This table provides information and statistics for pools.")
poolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolEntry.setDescription("This defines a row in the pools table.")
poolName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolName.setDescription("The name of the pool.")
poolAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,2,1,6,7,4,)).subtype(namedValues=NamedValues(("roundrobin", 1), ("weightedRoundRobin", 2), ("perceptive", 3), ("leastConnections", 4), ("fastestResponseTime", 5), ("random", 6), ("weightedLeastConnections", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAlgorithm.setDescription("The load-balancing algorithm the pool uses.")
poolNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNodes.setDescription("The number of nodes registered with this pool.")
poolDraining = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDraining.setDescription("The number of nodes in this pool which are draining.")
poolFailPool = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFailPool.setDescription("The name of this pool's failure pool.")
poolBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesInLo.setDescription("Bytes received by this pool from nodes ( low 32bits ).")
poolBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesInHi.setDescription("Bytes received by this pool from nodes ( high 32bits ).")
poolBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOutLo.setDescription("Bytes sent by this pool to nodes ( low 32bits ).")
poolBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOutHi.setDescription("Bytes sent by this pool to nodes ( high 32bits ).")
poolTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalConn.setDescription("Requests sent to this pool.")
poolPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(6,7,1,2,4,3,5,)).subtype(namedValues=NamedValues(("none", 1), ("ip", 2), ("rule", 3), ("transparent", 4), ("applicationCookie", 5), ("xZeusBackend", 6), ("ssl", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPersistence.setDescription("The session persistence method this pool uses")
poolSessionMigrated = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSessionMigrated.setDescription("Sessions migrated to a new node because\nthe desired node was unavailable.")
poolDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDisabled.setDescription("The number of nodes in this pool that are disabled.")
poolState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,2,3,1,)).subtype(namedValues=NamedValues(("active", 1), ("disabled", 2), ("draining", 3), ("unused", 4), ("unknown", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolState.setDescription("The state of this pool.")
poolConnsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolConnsQueued.setDescription("Total connections currently queued to this pool.")
poolQueueTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolQueueTimeouts.setDescription("Total connections that timed-out while queued.")
poolMinQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMinQueueTime.setDescription("Minimum time a connection was queued for, over the last second.")
poolMaxQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMaxQueueTime.setDescription("Maximum time a connection was queued for, over the last second.")
poolMeanQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMeanQueueTime.setDescription("Mean time a connection was queued for, over the last second.")
poolBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesIn.setDescription("Bytes received by this pool from nodes.")
poolBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOut.setDescription("Bytes sent by this pool to nodes.")
nodes = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4))
nodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNumber.setDescription("The number of IPv4 nodes on this system.")
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2))
if mibBuilder.loadTexts: nodeTable.setDescription("This table defines all the information for a particular IPv4 node.")
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "nodeIPAddress"), (0, "ZXTM-MIB-SMIv2", "nodePort"))
if mibBuilder.loadTexts: nodeEntry.setDescription("This defines a row in the IPv4 nodes table.")
nodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIPAddress.setDescription("The IPv4 address of this node.")
nodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePort.setDescription("The port this node listens on.")
nodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHostName.setDescription("The resolved name for this node.")
nodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeState.setDescription("The state of this node.")
nodeBytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesToNodeLo.setDescription("Bytes sent to this node ( low 32bits ).")
nodeBytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesToNodeHi.setDescription("Bytes sent to this node ( high 32bits ).")
nodeBytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesFromNodeLo.setDescription("Bytes received from this node ( low 32bits ).")
nodeBytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesFromNodeHi.setDescription("Bytes received from this node ( high 32bits ).")
nodeCurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCurrentRequests.setDescription("Connections currently established to this node.")
nodeTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeTotalConn.setDescription("Requests sent to this node.")
nodePooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePooledConn.setDescription("Requests that reused an existing pooled/keepalive\nconnection rather than creating a new TCP connection.")
nodeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFailures.setDescription("Failures of this node.")
nodeNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNewConn.setDescription("Requests that created a new connection to this node.")
nodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeErrors.setDescription("Number of timeouts, connection problems and other errors for this node.")
nodeResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMin.setDescription("Minimum response time (ms) in the last second for this node.")
nodeResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMax.setDescription("Maximum response time (ms) in the last second for this node.")
nodeResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMean.setDescription("Mean response time (ms) in the last second for this node.")
nodeCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCurrentConn.setDescription("Requests currently established to this node. ( does not include idle keepalives ).")
nodeNumberInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNumberInet46.setDescription("The number of nodes on this system (includes IPv4 and IPv6 nodes).")
nodeInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4))
if mibBuilder.loadTexts: nodeInet46Table.setDescription("This table defines all the information for a particular node (includes IPv4 and IPv6 addresses).")
nodeInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "nodeInet46AddressType"), (0, "ZXTM-MIB-SMIv2", "nodeInet46Address"), (0, "ZXTM-MIB-SMIv2", "nodeInet46Port"))
if mibBuilder.loadTexts: nodeInet46Entry.setDescription("This defines a row in the nodes table (includes IPv4 and IPv6 addresses).")
nodeInet46AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46AddressType.setDescription("The IP address type of this node.")
nodeInet46Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Address.setDescription("The IPv4 or IPv6 address of this node.")
nodeInet46Port = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Port.setDescription("The port this node listens on.")
nodeInet46HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46HostName.setDescription("The resolved name for this node.")
nodeInet46State = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46State.setDescription("The state of this node.")
nodeInet46BytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNodeLo.setDescription("Bytes sent to this node ( low 32bits ).")
nodeInet46BytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNodeHi.setDescription("Bytes sent to this node ( high 32bits ).")
nodeInet46BytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNodeLo.setDescription("Bytes received from this node ( low 32bits ).")
nodeInet46BytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNodeHi.setDescription("Bytes received from this node ( high 32bits ).")
nodeInet46CurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46CurrentRequests.setDescription("Active connections established to this node, does not include idle connections.")
nodeInet46TotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46TotalConn.setDescription("Requests sent to this node.")
nodeInet46PooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46PooledConn.setDescription("Requests that reused an existing pooled/keepalive\nconnection rather than creating a new TCP connection.")
nodeInet46Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Failures.setDescription("Failures of this node.")
nodeInet46NewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46NewConn.setDescription("Requests that created a new connection to this node.")
nodeInet46Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Errors.setDescription("Number of timeouts, connection problems and other errors for this node.")
nodeInet46ResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMin.setDescription("Minimum response time (ms) in the last second for this node.")
nodeInet46ResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMax.setDescription("Maximum response time (ms) in the last second for this node.")
nodeInet46ResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMean.setDescription("Mean response time (ms) in the last second for this node.")
nodeInet46IdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46IdleConns.setDescription("Number of idle HTTP connections to this node.")
nodeInet46CurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46CurrentConn.setDescription("Current connections established to this node, includes idle connections.")
nodeInet46BytesToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNode.setDescription("Bytes sent to this node.")
nodeInet46BytesFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNode.setDescription("Bytes received from this node.")
perPoolNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNumber.setDescription("The number of nodes on this system.")
perPoolNodeTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6))
if mibBuilder.loadTexts: perPoolNodeTable.setDescription("This table defines all the information for a particular node in a pool.")
perPoolNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "perPoolNodePoolName"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: perPoolNodeEntry.setDescription("This defines a row in the perPoolNodes table.")
perPoolNodePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePoolName.setDescription("The name of the pool that this node belongs to.")
perPoolNodeNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeAddressType.setDescription("The IP address type of this node.")
perPoolNodeNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeAddress.setDescription("The IPv4 or IPv6 address of this node.")
perPoolNodeNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodePort.setDescription("The port that this node listens on.")
perPoolNodeNodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeHostName.setDescription("The name for this node provided in the configuration.")
perPoolNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,2,1,)).subtype(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3), ("draining", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeState.setDescription("The state of this node.")
perPoolNodeBytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNodeLo.setDescription("Bytes sent to this node ( low 32bits ).")
perPoolNodeBytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNodeHi.setDescription("Bytes sent to this node ( high 32bits ).")
perPoolNodeBytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeLo.setDescription("Bytes received from this node ( low 32bits ).")
perPoolNodeBytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeHi.setDescription("Bytes received from this node ( high 32bits ).")
perPoolNodeCurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeCurrentRequests.setDescription("Active connections established to this node, does not include idle connections.")
perPoolNodeTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeTotalConn.setDescription("Requests sent to this node.")
perPoolNodePooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePooledConn.setDescription("Requests that reused an existing pooled/keepalive\nconnection rather than creating a new TCP connection.")
perPoolNodeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeFailures.setDescription("Failures of this node.")
perPoolNodeNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNewConn.setDescription("Requests that created a new connection to this node.")
perPoolNodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeErrors.setDescription("Number of timeouts, connection problems and other errors for this node.")
perPoolNodeResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMin.setDescription("Minimum response time (ms) in the last second for this node.")
perPoolNodeResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMax.setDescription("Maximum response time (ms) in the last second for this node.")
perPoolNodeResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMean.setDescription("Mean response time (ms) in the last second for this node.")
perPoolNodeIdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeIdleConns.setDescription("Number of idle HTTP connections to this node.")
perPoolNodeCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeCurrentConn.setDescription("Current connections established to a node, includes idle connections.")
perPoolNodeBytesToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNode.setDescription("Bytes sent to this node.")
perPoolNodeBytesFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNode.setDescription("Bytes received from this node.")
serviceprotection = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5))
serviceProtNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtNumber.setDescription("The number of service protection classes defined.")
serviceProtTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2))
if mibBuilder.loadTexts: serviceProtTable.setDescription("This table provides information and statistics for service\nprotection classes.")
serviceProtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "serviceProtName"))
if mibBuilder.loadTexts: serviceProtEntry.setDescription("This defines a row in the service protection table.")
serviceProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtName.setDescription("The name of the service protection class.")
serviceProtTotalRefusal = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtTotalRefusal.setDescription("Connections refused by this service protection class.")
serviceProtLastRefusalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtLastRefusalTime.setDescription("The time (in hundredths of a second) since this service\nprotection class last refused a connection (this value will\nwrap if no connections are refused in more than 497 days).")
serviceProtRefusalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalIP.setDescription("Connections refused by this service protection class because the \nsource IP address was banned.")
serviceProtRefusalConc1IP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConc1IP.setDescription("Connections refused by this service protection class because the \nsource IP address issued too many concurrent connections.")
serviceProtRefusalConc10IP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConc10IP.setDescription("Connections refused by this service protection class because the \ntop 10 source IP addresses issued too many concurrent connections.")
serviceProtRefusalConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConnRate.setDescription("Connections refused by this service protection class because the \nsource IP address issued too many connections within 60 seconds.")
serviceProtRefusalRFC2396 = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalRFC2396.setDescription("Connections refused by this service protection class because the \nHTTP request was not RFC 2396 compliant.")
serviceProtRefusalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalSize.setDescription("Connections refused by this service protection class because the \nrequest was larger than the defined limits allowed.")
serviceProtRefusalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalBinary.setDescription("Connections refused by this service protection class because the \nrequest contained disallowed binary content.")
trafficips = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6))
trafficIPNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumber.setDescription("The number of traffic IPv4 addresses on this system.")
trafficIPNumberRaised = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberRaised.setDescription("The number of traffic IPv4 addresses currently raised on this system.")
trafficIPTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3))
if mibBuilder.loadTexts: trafficIPTable.setDescription("This table details the traffic IPv4 addresses that are hosted by\nthis traffic manager cluster.")
trafficIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "trafficIPAddress"))
if mibBuilder.loadTexts: trafficIPEntry.setDescription("This defines a row in the IPv4 traffic IP table.")
trafficIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPAddress.setDescription("This is a traffic IP address.")
trafficIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("raised", 1), ("lowered", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPState.setDescription("Whether this traffic IP address is currently being hosted by this\ntraffic manager.")
trafficIPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPTime.setDescription("The time (in hundredths of a second) since trafficIPState last\nchanged (this value will wrap if the state hasn't changed for 497 days).")
trafficIPGatewayPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPGatewayPingRequests.setDescription("Number of ping requests sent to the gateway machine.")
trafficIPGatewayPingResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPGatewayPingResponses.setDescription("Number of ping responses received from the gateway machine.")
trafficIPNodePingRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNodePingRequests.setDescription("Number of ping requests sent to the backend nodes.")
trafficIPNodePingResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNodePingResponses.setDescription("Number of ping responses received from the backend nodes.")
trafficIPPingResponseErrors = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPPingResponseErrors.setDescription("Number of ping response errors.")
trafficIPARPMessage = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPARPMessage.setDescription("Number of ARP messages sent for raised Traffic IP Addresses.")
trafficIPNumberInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberInet46.setDescription("The number of traffic IP addresses on this system (includes IPv4 and IPv6 addresses).")
trafficIPNumberRaisedInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberRaisedInet46.setDescription("The number of traffic IP addresses currently raised on this system (includes IPv4 and IPv6 addresses).")
trafficIPInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12))
if mibBuilder.loadTexts: trafficIPInet46Table.setDescription("This table details the traffic IP addresses that are hosted by\nthis traffic manager cluster (includes IPv4 and IPv6 addresses).")
trafficIPInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), (0, "ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: trafficIPInet46Entry.setDescription("This defines a row in the traffic IP table.")
trafficIPInet46AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46AddressType.setDescription("The traffic IP address type.")
trafficIPInet46Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46Address.setDescription("This is a traffic IP address.")
trafficIPInet46State = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("raised", 1), ("lowered", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46State.setDescription("Whether this traffic IP address is currently being hosted by this\ntraffic manager.")
trafficIPInet46Time = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46Time.setDescription("The time (in hundredths of a second) since trafficIPState last\nchanged (this value will wrap if the state hasn't changed for 497 days).")
servicelevelmonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7))
serviceLevelNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelNumber.setDescription("The number of SLM classes defined.")
serviceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2))
if mibBuilder.loadTexts: serviceLevelTable.setDescription("This table provides information and statistics for SLM classes.")
serviceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: serviceLevelEntry.setDescription("This defines a row in the SLM table.")
serviceLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelName.setDescription("The name of the SLM class.")
serviceLevelTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelTotalConn.setDescription("Requests handled by this SLM class.")
serviceLevelTotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelTotalNonConf.setDescription("Non-conforming requests handled by this SLM class.")
serviceLevelResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMin.setDescription("Minimum response time (ms) in the last second for this SLM class.")
serviceLevelResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMax.setDescription("Maximum response time (ms) in the last second for this SLM class.")
serviceLevelResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMean.setDescription("Mean response time (ms) in the last second for this SLM class.")
serviceLevelIsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notok", 1), ("ok", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelIsOK.setDescription("Indicates if this SLM class is currently conforming.")
serviceLevelConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelConforming.setDescription("Percentage of requests associated with this SLM class that are conforming")
serviceLevelCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelCurrentConns.setDescription("The number of connections currently associated with this SLM class.")
pernodeservicelevelmon = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8))
perNodeServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1))
if mibBuilder.loadTexts: perNodeServiceLevelTable.setDescription("This table provides information and statistics for SLM classes\non a per node basis (IPv4 nodes only).")
perNodeServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelSLMName"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelNodeIPAddr"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelNodePort"))
if mibBuilder.loadTexts: perNodeServiceLevelEntry.setDescription("This defines a row in the per-node SLM table (IPv4 nodes only).")
perNodeServiceLevelSLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelSLMName.setDescription("The name of the SLM class.")
perNodeServiceLevelNodeIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelNodeIPAddr.setDescription("The IP address of this node.")
perNodeServiceLevelNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelNodePort.setDescription("The port number of this node.")
perNodeServiceLevelTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelTotalConn.setDescription("Requests handled by this SLM class to this node.")
perNodeServiceLevelTotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelTotalNonConf.setDescription("Non-conforming requests handled by this SLM class to this node.")
perNodeServiceLevelResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMin.setDescription("Minimum response time (ms) in the last second for this SLM class to\nthis node.")
perNodeServiceLevelResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMax.setDescription("Maximum response time (ms) in the last second for this SLM class to\nthis node.")
perNodeServiceLevelResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMean.setDescription("Mean response time (ms) in the last second for this SLM class to\nthis node.")
perNodeServiceLevelInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2))
if mibBuilder.loadTexts: perNodeServiceLevelInet46Table.setDescription("This table provides information and statistics for SLM classes\non a per node basis (includes IPv4 and IPv6 nodes).")
perNodeServiceLevelInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46SLMName"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddressType"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddress"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodePort"))
if mibBuilder.loadTexts: perNodeServiceLevelInet46Entry.setDescription("This defines a row in the per-node SLM table (includes IPv4 and IPv6 nodes).")
perNodeServiceLevelInet46SLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46SLMName.setDescription("The name of the SLM class.")
perNodeServiceLevelInet46NodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddressType.setDescription("The type of IP address of this node.")
perNodeServiceLevelInet46NodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddress.setDescription("The IP address of this node.")
perNodeServiceLevelInet46NodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodePort.setDescription("The port number of this node.")
perNodeServiceLevelInet46TotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalConn.setDescription("Requests handled by this SLM class to this node.")
perNodeServiceLevelInet46TotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalNonConf.setDescription("Non-conforming requests handled by this SLM class to this node.")
perNodeServiceLevelInet46ResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMin.setDescription("Minimum response time (ms) in the last second for this SLM class to\nthis node.")
perNodeServiceLevelInet46ResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMax.setDescription("Maximum response time (ms) in the last second for this SLM class to\nthis node.")
perNodeServiceLevelInet46ResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMean.setDescription("Mean response time (ms) in the last second for this SLM class to\nthis node.")
bandwidthmgt = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9))
bandwidthClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassNumber.setDescription("The number of bandwidth classes defined.")
bandwidthClassTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2))
if mibBuilder.loadTexts: bandwidthClassTable.setDescription("This table provides information and statistics for \nbandwidth classes.")
bandwidthClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "bandwidthClassName"))
if mibBuilder.loadTexts: bandwidthClassEntry.setDescription("This defines a row in the bandwidth class.")
bandwidthClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassName.setDescription("The name of the bandwidth class.")
bandwidthClassMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassMaximum.setDescription("Maximum bandwidth class limit (kbits/s).")
bandwidthClassGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassGuarantee.setDescription("Guaranteed bandwidth class limit (kbits/s).  Currently unused.")
bandwidthClassBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOutLo.setDescription("Bytes output by connections assigned to this bandwidth class ( low 32bits ).")
bandwidthClassBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOutHi.setDescription("Bytes output by connections assigned to this bandwidth class ( high 32bits ).")
bandwidthClassBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOut.setDescription("Bytes output by connections assigned to this bandwidth class.")
connratelimit = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10))
rateClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassNumber.setDescription("The number of rate classes defined.")
rateClassTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2))
if mibBuilder.loadTexts: rateClassTable.setDescription("This table provides information and statistics for\nrate classes.")
rateClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "rateClassName"))
if mibBuilder.loadTexts: rateClassEntry.setDescription("This defines a row in the rate class info.")
rateClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassName.setDescription("The name of the rate class.")
rateClassMaxRatePerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassMaxRatePerMin.setDescription("The maximum rate that requests may pass through this rate class (requests/min).")
rateClassMaxRatePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassMaxRatePerSec.setDescription("The maximum rate that requests may pass through this rate class (requests/sec).")
rateClassQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassQueueLength.setDescription("The current number of requests queued by this rate class.")
rateClassCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassCurrentRate.setDescription("The average rate that requests are passing through this rate class.")
rateClassDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassDropped.setDescription("Requests dropped from this rate class without being processed (e.g. timeouts).")
rateClassConnsEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassConnsEntered.setDescription("Connections that have entered the rate class and have been queued.")
rateClassConnsLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassConnsLeft.setDescription("Connections that have left the rate class.")
extra = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11))
userCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterNumber.setDescription("The number of user defined counters.")
userCounterTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2))
if mibBuilder.loadTexts: userCounterTable.setDescription("This table holds the values for user defined\ncounters.")
userCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "userCounterName"))
if mibBuilder.loadTexts: userCounterEntry.setDescription("This defines a row in the user counters table.")
userCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterName.setDescription("The name of the user counter.")
userCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterValue.setDescription("The value of the user counter.")
userCounter64Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3))
if mibBuilder.loadTexts: userCounter64Table.setDescription("This table holds the values for user defined 64-bit\ncounters.")
userCounter64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "userCounter64Name"))
if mibBuilder.loadTexts: userCounter64Entry.setDescription("This defines a row in the 64-bit user counters table.")
userCounter64Name = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounter64Name.setDescription("The name of the 64-bit user counter.")
userCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounter64Value.setDescription("The value of the 64-bit user counter.")
netinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12))
interfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceNumber.setDescription("The number of network interfaces.")
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2))
if mibBuilder.loadTexts: interfaceTable.setDescription("This table gives statistics for the network interfaces on this system.")
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "interfaceName"))
if mibBuilder.loadTexts: interfaceEntry.setDescription("This defines a row in the network interfaces table.")
interfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceName.setDescription("The name of the network interface.")
interfaceRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxPackets.setDescription("The number of packets received by this interface.")
interfaceTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxPackets.setDescription("The number of packets transmitted by this interface.")
interfaceRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxErrors.setDescription("The number of receive errors reported by this interface.")
interfaceTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxErrors.setDescription("The number of transmit errors reported by this interface.")
interfaceCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceCollisions.setDescription("The number of collisions reported by this interface.")
interfaceRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytesLo.setDescription("Bytes received by this interface ( low 32bits ).")
interfaceRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytesHi.setDescription("Bytes received by this interface ( high 32bits ).")
interfaceTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytesLo.setDescription("Bytes transmitted by this interface ( low 32bits ).")
interfaceTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytesHi.setDescription("Bytes transmitted by this interface ( high 32bits ).")
interfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytes.setDescription("Bytes received by this interface.")
interfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytes.setDescription("Bytes transmitted by this interface.")
events = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13))
eventNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventNumber.setDescription("The number of event configurations.")
eventTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2))
if mibBuilder.loadTexts: eventTable.setDescription("This table gives information on the event configurations in the traffic manager.")
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "eventName"))
if mibBuilder.loadTexts: eventEntry.setDescription("This defines a row in the events table.")
eventName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventName.setDescription("The name of the event configuration.")
eventsMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsMatched.setDescription("Number of times this event configuration has matched.")
actions = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14))
actionNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionNumber.setDescription("The number of actions configured in the traffic manager.")
actionTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2))
if mibBuilder.loadTexts: actionTable.setDescription("This table gives information on the action configurations in the traffic manager.")
actionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "actionName"))
if mibBuilder.loadTexts: actionEntry.setDescription("This defines a row in the actions table.")
actionName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionName.setDescription("The name of the action.")
actionsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsProcessed.setDescription("Number of times this action has been processed.")
zxtmtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15))
trapsZero = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0))
persistence = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 16))
cache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17))
webcache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1))
webCacheHitsLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitsLo.setDescription("Number of times a page has been successfully found in the web cache (low 32 bits).")
webCacheHitsHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitsHi.setDescription("Number of times a page has been successfully found in the web cache (high 32 bits).")
webCacheMissesLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMissesLo.setDescription("Number of times a page has not been found in the web cache (low 32 bits).")
webCacheMissesHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMissesHi.setDescription("Number of times a page has not been found in the web cache (high 32 bits).")
webCacheLookupsLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookupsLo.setDescription("Number of times a page has been looked up in the web cache (low 32 bits).")
webCacheLookupsHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookupsHi.setDescription("Number of times a page has been looked up in the web cache (high 32 bits).")
webCacheMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMemUsed.setDescription("Total memory used by the web cache in kilobytes.")
webCacheMemMaximum = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMemMaximum.setDescription("The maximum amount of memory the web cache can use in kilobytes.")
webCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitRate.setDescription("The percentage of web cache lookups that succeeded.")
webCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheEntries.setDescription("The number of items in the web cache.")
webCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMaxEntries.setDescription("The maximum number of items in the web cache.")
webCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheOldest.setDescription("The age of the oldest item in the web cache (in seconds).")
webCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHits.setDescription("Number of times a page has been successfully found in the web cache.")
webCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMisses.setDescription("Number of times a page has not been found in the web cache.")
webCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookups.setDescription("Number of times a page has been looked up in the web cache.")
sslcache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2))
sslCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheHits.setDescription("Number of times a SSL entry has been successfully found in the server cache.")
sslCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheMisses.setDescription("Number of times a SSL entry has not been available in the server cache.")
sslCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheLookups.setDescription("Number of times a SSL entry has been looked up in the server cache.")
sslCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheHitRate.setDescription("The percentage of SSL server cache lookups that succeeded.")
sslCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheEntries.setDescription("The total number of SSL sessions stored in the server cache.")
sslCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheEntriesMax.setDescription("The maximum number of SSL entries in the server cache.")
sslCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheOldest.setDescription("The age of the oldest SSL session in the server cache (in seconds).")
aspsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3))
aspSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheHits.setDescription("Number of times a ASP session entry has been successfully found in the cache.")
aspSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheMisses.setDescription("Number of times a ASP session entry has not been available in the cache.")
aspSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheLookups.setDescription("Number of times a ASP session entry has been looked up in the cache.")
aspSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheHitRate.setDescription("The percentage of ASP session lookups that succeeded.")
aspSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheEntries.setDescription("The total number of ASP sessions stored in the cache.")
aspSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheEntriesMax.setDescription("The maximum number of ASP sessions in the cache.")
aspSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheOldest.setDescription("The age of the oldest ASP session in the cache (in seconds).")
ipsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4))
ipSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheHits.setDescription("Number of times a IP session entry has been successfully found in the cache.")
ipSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheMisses.setDescription("Number of times a IP session entry has not been available in the cache.")
ipSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheLookups.setDescription("Number of times a IP session entry has been looked up in the cache.")
ipSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheHitRate.setDescription("The percentage of IP session lookups that succeeded.")
ipSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheEntries.setDescription("The total number of IP sessions stored in the cache.")
ipSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheEntriesMax.setDescription("The maximum number of IP sessions in the cache.")
ipSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheOldest.setDescription("The age of the oldest IP session in the cache (in seconds).")
j2eesessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5))
j2eeSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheHits.setDescription("Number of times a J2EE session entry has been successfully found in the cache.")
j2eeSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheMisses.setDescription("Number of times a J2EE session entry has not been available in the cache.")
j2eeSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheLookups.setDescription("Number of times a J2EE session entry has been looked up in the cache.")
j2eeSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheHitRate.setDescription("The percentage of J2EE session lookups that succeeded.")
j2eeSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheEntries.setDescription("The total number of J2EE sessions stored in the cache.")
j2eeSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheEntriesMax.setDescription("The maximum number of J2EE sessions in the cache.")
j2eeSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheOldest.setDescription("The age of the oldest J2EE session in the cache (in seconds).")
unisessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6))
uniSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheHits.setDescription("Number of times a universal session entry has been successfully found in the cache.")
uniSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheMisses.setDescription("Number of times a universal session entry has not been available in the cache.")
uniSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheLookups.setDescription("Number of times a universal session entry has been looked up in the cache.")
uniSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheHitRate.setDescription("The percentage of universal session lookups that succeeded.")
uniSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheEntries.setDescription("The total number of universal sessions stored in the cache.")
uniSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheEntriesMax.setDescription("The maximum number of universal sessions in the cache.")
uniSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheOldest.setDescription("The age of the oldest universal session in the cache (in seconds).")
sslsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7))
sslSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheHits.setDescription("Number of times a SSL session persistence entry has been successfully found in the cache.")
sslSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheMisses.setDescription("Number of times a SSL session persistence entry has not been available in the cache.")
sslSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheLookups.setDescription("Number of times a SSL session persistence entry has been looked up in the cache.")
sslSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheHitRate.setDescription("The percentage of SSL session persistence lookups that succeeded.")
sslSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheEntries.setDescription("The total number of SSL session persistence entries stored in the cache.")
sslSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheEntriesMax.setDescription("The maximum number of SSL session persistence entries in the cache.")
sslSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheOldest.setDescription("The age of the oldest SSL session in the cache (in seconds).")
rules = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18))
ruleNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleNumber.setDescription("The number of TrafficScript rules.")
ruleTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2))
if mibBuilder.loadTexts: ruleTable.setDescription("This table provides information and statistics for TrafficScript rules.")
ruleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleEntry.setDescription("This defines a row in the rules table.")
ruleName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleName.setDescription("The name of the TrafficScript rule.")
ruleExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleExecutions.setDescription("Number of times this TrafficScript rule has been executed.")
ruleAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleAborts.setDescription("Number of times this TrafficScript rule has aborted.")
ruleResponds = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleResponds.setDescription("Number of times this TrafficScript rule has responded directly to the client.")
rulePoolSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rulePoolSelect.setDescription("Number of times this TrafficScript rule has selected a pool to use.")
ruleRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleRetries.setDescription("Number of times this TrafficScript rule has forced the request to be retried.")
ruleDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleDiscards.setDescription("Number of times this TrafficScript rule has discarded the connection.")
ruleExecutionTimeWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleExecutionTimeWarnings.setDescription("Number of times this TrafficScript rule has exceeded the execution time warning threshold.")
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19))
monitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorNumber.setDescription("The number of Monitors.")
monitorTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2))
if mibBuilder.loadTexts: monitorTable.setDescription("This table provides information and statistics on Monitors.")
monitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorEntry.setDescription("This defines a row in the monitors table.")
monitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorName.setDescription("The name of the monitor.")
licensekeys = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20))
licensekeyNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensekeyNumber.setDescription("The number of License keys.")
licensekeyTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2))
if mibBuilder.loadTexts: licensekeyTable.setDescription("This table provides information and statistics on License Keys.")
licensekeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: licensekeyEntry.setDescription("This defines a row in the license keys table.")
licensekeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensekeyName.setDescription("The name of the License Key.")
zxtms = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21))
zxtmNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxtmNumber.setDescription("The number of traffic managers in the cluster.")
zxtmTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2))
if mibBuilder.loadTexts: zxtmTable.setDescription("This table provides information and statistics on traffic managers.")
zxtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: zxtmEntry.setDescription("This defines a row in the traffic managers table.")
zxtmName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxtmName.setDescription("The name of the traffic manager.")
trapobjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22))
fullLogLine = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fullLogLine.setDescription("The full log line of an event (for traps).")
confName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confName.setDescription("The name of the configuration file affected (for traps).")
customEventName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: customEventName.setDescription("The name of the Custom Event (for traps).")
domainName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setDescription("The DNS domain name (for traps).")
cloudcredentials = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23))
cloudcredentialsClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsClassNumber.setDescription("The number of cloud credentials sets defined.")
cloudcredentialsTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2))
if mibBuilder.loadTexts: cloudcredentialsTable.setDescription("This table provides statistics for cloud credentials sets.")
cloudcredentialsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: cloudcredentialsEntry.setDescription("This defines a row in the cloud credentials table.")
cloudcredentialsName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsName.setDescription("The name of this set of cloud credentials.")
cloudcredentialsStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsStatusRequests.setDescription("The number of status API requests made\nwith this set of cloud credentials.")
cloudcredentialsNodeCreations = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsNodeCreations.setDescription("The number of instance creation API requests\nmade with this set of cloud credentials.")
cloudcredentialsNodeDeletions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsNodeDeletions.setDescription("The number of instance destruction API requests\nmade with this set of cloud credentials.")
glbservices = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24))
glbServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceNumber.setDescription("The number of GLB Services on this system.")
glbServiceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2))
if mibBuilder.loadTexts: glbServiceTable.setDescription("This table provides information and statistics for GLB Services.")
glbServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbServiceEntry.setDescription("This defines a row in the GLB Services table.")
glbServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceName.setDescription("The name of the GLB Service.")
glbServiceResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceResponses.setDescription("Number of A records this GLB Service has altered.")
glbServiceUnmodified = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceUnmodified.setDescription("Number of A records this GLB Service has passed through unmodified.")
glbServiceDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceDiscarded.setDescription("Number of A records this GLB Service has discarded.")
perlocationservices = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25))
perLocationServiceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1))
if mibBuilder.loadTexts: perLocationServiceTable.setDescription("This table provides information and statistics for GLB Services\non a per location basis.")
perLocationServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "perLocationServiceLocationName"), (0, "ZXTM-MIB-SMIv2", "perLocationServiceName"))
if mibBuilder.loadTexts: perLocationServiceEntry.setDescription("This defines a row in the per-location table.")
perLocationServiceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLocationName.setDescription("The name of the location.")
perLocationServiceLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLocationCode.setDescription("The code for the location.")
perLocationServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceName.setDescription("The name of the GLB Service.")
perLocationServiceDraining = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("draining", 1), ("active", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceDraining.setDescription("The draining state of this location for this GLB Service.")
perLocationServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("alive", 1), ("dead", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceState.setDescription("The state of this location for this GLB Service.")
perLocationServiceFrontendState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("alive", 1), ("dead", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceFrontendState.setDescription("The frontend state of this location for this GLB Service.")
perLocationServiceMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("alive", 1), ("dead", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceMonitorState.setDescription("The monitor state of this location for this GLB Service.")
perLocationServiceLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLoad.setDescription("The load metric for this location for this GLB Service.")
perLocationServiceResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceResponses.setDescription("Number of A records that have been altered to point to this location\nfor this GLB Service.")
locations = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26))
locationTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1))
if mibBuilder.loadTexts: locationTable.setDescription("This table provides information and statistics for GLB Services\non a per location basis.")
locationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "locationName"))
if mibBuilder.loadTexts: locationEntry.setDescription("This defines a row in the per-location table.")
locationName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationName.setDescription("The name of the location.")
locationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationCode.setDescription("The code for the location.")
locationLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationLoad.setDescription("The mean load metric for this location.")
locationResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationResponses.setDescription("Number of A records that have been altered to point to this location.")
listenips = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27))
listenIPTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2))
if mibBuilder.loadTexts: listenIPTable.setDescription("This table defines all the information for a particular listening IP (includes IPv4 and IPv6 addresses).")
listenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "listenIPAddressType"), (0, "ZXTM-MIB-SMIv2", "listenIPAddress"))
if mibBuilder.loadTexts: listenIPEntry.setDescription("This defines a row in the listenips table (includes IPv4 and IPv6 addresses).")
listenIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPAddressType.setDescription("The IP address type of this listening IP.")
listenIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPAddress.setDescription("The IPv4 or IPv6 address of this listening IP.")
listenIPBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesInLo.setDescription("Bytes sent to this listening IP ( low 32bits ).")
listenIPBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesInHi.setDescription("Bytes sent to this listening IP ( high 32bits ).")
listenIPBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOutLo.setDescription("Bytes sent from this listening IP ( low 32bits ).")
listenIPBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOutHi.setDescription("Bytes sent from this listening IP ( high 32bits ).")
listenIPCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPCurrentConn.setDescription("TCP connections currently established to this listening IP.")
listenIPTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalConn.setDescription("Requests sent to this listening IP.")
listenIPMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPMaxConn.setDescription("Maximum number of simultaneous TCP connections this listening IP\nhas processed at any one time.")
listenIPBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesIn.setDescription("Bytes sent to this listening IP.")
listenIPBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOut.setDescription("Bytes sent from this listening IP.")
authenticators = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28))
authenticatorNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorNumber.setDescription("The number of Authenticators.")
authenticatorTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2))
if mibBuilder.loadTexts: authenticatorTable.setDescription("This table provides information and statistics for Authenticators.")
authenticatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "authenticatorName"))
if mibBuilder.loadTexts: authenticatorEntry.setDescription("This defines a row in the authenticators table.")
authenticatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorName.setDescription("The name of the Authenticator.")
authenticatorRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorRequests.setDescription("Number of times this Authenticator has been asked to authenticate.")
authenticatorPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorPasses.setDescription("Number of times this Authenticator has successfully authenticated.")
authenticatorFails = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorFails.setDescription("Number of times this Authenticator has failed to authenticate.")
authenticatorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorErrors.setDescription("Number of connection errors that have occurred when trying to connect to an authentication server.")
conformanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29))
complianceStatements = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30))
steelheads = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31))
steelheadNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadNumber.setDescription("The number of Steelheads.")
steelheadTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2))
if mibBuilder.loadTexts: steelheadTable.setDescription("This table provides information and statistics for Steelheads.")
steelheadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1)).setIndexNames((0, "ZXTM-MIB-SMIv2", "steelheadName"))
if mibBuilder.loadTexts: steelheadEntry.setDescription("This defines a row in the steelheads table.")
steelheadName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadName.setDescription("The name of the Steelhead.")
steelheadOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadOptimized.setDescription("The current number of connections being forwarded to the Cloud Steelhead for optimization.")
sslocspstapling = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32))
sslOcspStaplingCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingCacheCount.setDescription("The number of entries in the OCSP stapling cache.")
sslOcspStaplingCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingCount.setDescription("The number of outgoing OCSP requests for OCSP stapling.")
sslOcspStaplingSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingSuccessCount.setDescription("The number of successful outgoing OCSP requests for OCSP stapling.")
sslOcspStaplingFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingFailureCount.setDescription("The number of failed outgoing OCSP requests for OCSP stapling.")
sslOcspStaplingGoodCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingGoodCount.setDescription("The number of 'good' OCSP responses for OCSP stapling.")
sslOcspStaplingRevokedCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingRevokedCount.setDescription("The number of 'revoked' OCSP responses for OCSP stapling.")
sslOcspStaplingUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingUnknownCount.setDescription("The number of 'unknown' OCSP requests for OCSP stapling.")

# Augmentions

# Notifications

testaction = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 1)).setObjects(*(("ZXTM-MIB-SMIv2", "actionName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: testaction.setDescription("Testing configuration for an action (emitted when testing an action in the UI)")
running = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 2)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: running.setDescription("Software is running")
fewfreefds = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 3)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: fewfreefds.setDescription("Running out of free file descriptors")
restartrequired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 4)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: restartrequired.setDescription("Software must be restarted to apply configuration changes")
timemovedback = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 5)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: timemovedback.setDescription("Time has been moved back")
sslfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 6)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslfail.setDescription("One or more SSL connections from clients failed recently")
hardware = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 7)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: hardware.setDescription("Appliance hardware notification. Deprecated, replaced with 'appliance'")
zxtmswerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 8)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: zxtmswerror.setDescription("Internal software error")
customevent = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 9)).setObjects(*(("ZXTM-MIB-SMIv2", "customEventName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: customevent.setDescription("A custom event was emitted using the TrafficScript 'event.emit()' function")
versionmismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 10)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: versionmismatch.setDescription("Configuration update refused: traffic manager version mismatch")
machineok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 11)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"), ) )
if mibBuilder.loadTexts: machineok.setDescription("Remote machine is now working")
machinetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 12)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"), ) )
if mibBuilder.loadTexts: machinetimeout.setDescription("Remote machine has timed out and been marked as failed")
machinefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 13)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"), ) )
if mibBuilder.loadTexts: machinefail.setDescription("Remote machine has failed")
allmachinesok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 14)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: allmachinesok.setDescription("All machines are working")
flipperbackendsworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 15)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: flipperbackendsworking.setDescription("Back-end nodes are now working")
flipperfrontendsworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 16)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: flipperfrontendsworking.setDescription("Frontend machines are now working")
pingbackendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 17)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: pingbackendfail.setDescription("Failed to ping back-end nodes")
pingfrontendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 18)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: pingfrontendfail.setDescription("Failed to ping any of the machines used to check the front-end connectivity")
pinggwfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 19)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: pinggwfail.setDescription("Failed to ping default gateway")
statebaddata = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 20)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: statebaddata.setDescription("Received an invalid response from another cluster member")
stateconnfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 21)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: stateconnfail.setDescription("Failed to connect to another cluster member for state sharing")
stateok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 22)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: stateok.setDescription("Successfully connected to another cluster member for state sharing")
statereadfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 23)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: statereadfail.setDescription("Reading state data from another cluster member failed")
statetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 24)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: statetimeout.setDescription("Timeout while sending state data to another cluster member")
stateunexpected = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 25)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: stateunexpected.setDescription("Received unexpected state data from another cluster member")
statewritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 26)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: statewritefail.setDescription("Writing state data to another cluster member failed")
sslhwfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 27)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslhwfail.setDescription("SSL hardware support failed")
sslhwrestart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 28)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslhwrestart.setDescription("SSL hardware support restarted")
sslhwstart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 29)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslhwstart.setDescription("SSL hardware support started")
confdel = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 30)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: confdel.setDescription("Configuration file deleted")
confmod = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 31)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: confmod.setDescription("Configuration file modified")
confadd = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 32)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: confadd.setDescription("Configuration file added")
confok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 33)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: confok.setDescription("Configuration file now OK")
javadied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 34)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: javadied.setDescription("Java runner died")
javastop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 35)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: javastop.setDescription("Java support has stopped")
javastartfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 36)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: javastartfail.setDescription("Java runner failed to start")
javaterminatefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 37)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: javaterminatefail.setDescription("Java runner failed to terminate")
javanotfound = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 38)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: javanotfound.setDescription("Cannot start Java runner, program not found")
javastarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 39)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: javastarted.setDescription("Java runner started")
servleterror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 40)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: servleterror.setDescription("Servlet encountered an error")
monitorfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 41)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "monitorName"), ) )
if mibBuilder.loadTexts: monitorfail.setDescription("Monitor has detected a failure")
monitorok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 42)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "monitorName"), ) )
if mibBuilder.loadTexts: monitorok.setDescription("Monitor is working")
rulexmlerr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 43)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulexmlerr.setDescription("Rule encountered an XML error")
pooluseunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 44)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: pooluseunknown.setDescription("Rule selected an unknown pool")
ruleabort = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 45)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: ruleabort.setDescription("Rule aborted during execution")
rulebufferlarge = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 46)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulebufferlarge.setDescription("Rule has buffered more data than expected")
rulebodycomperror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 47)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulebodycomperror.setDescription("Rule encountered invalid data while uncompressing response")
forwardproxybadhost = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 48)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: forwardproxybadhost.setDescription("Rule selected an unresolvable host")
invalidemit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 49)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: invalidemit.setDescription("Rule used event.emit() with an invalid custom event")
rulenopersistence = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 50)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulenopersistence.setDescription("Rule selected an unknown session persistence class")
rulelogmsginfo = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 51)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulelogmsginfo.setDescription("Rule logged an info message using log.info")
rulelogmsgwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 52)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulelogmsgwarn.setDescription("Rule logged a warning message using log.warn")
rulelogmsgserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 53)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulelogmsgserious.setDescription("Rule logged an error message using log.error")
norate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 54)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: norate.setDescription("Rule selected an unknown rate shaping class")
poolactivenodesunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 55)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: poolactivenodesunknown.setDescription("Rule references an unknown pool via pool.activenodes")
datastorefull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 56)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: datastorefull.setDescription("data.set() has run out of space")
expired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 57)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) )
if mibBuilder.loadTexts: expired.setDescription("License key has expired")
licensecorrupt = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 58)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) )
if mibBuilder.loadTexts: licensecorrupt.setDescription("License key is corrupt")
expiresoon = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 59)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) )
if mibBuilder.loadTexts: expiresoon.setDescription("License key expires within 7 days")
usinglicense = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 60)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) )
if mibBuilder.loadTexts: usinglicense.setDescription("Using license key")
licenseclustertoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 61)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: licenseclustertoobig.setDescription("Cluster size exceeds license key limit")
unlicensed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 62)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: unlicensed.setDescription("Started without a license")
usingdevlicense = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 63)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: usingdevlicense.setDescription("Using a development license")
poolnonodes = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 64)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: poolnonodes.setDescription("Pool configuration contains no valid backend nodes")
poolok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 65)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: poolok.setDescription("Pool now has working nodes")
pooldied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 66)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: pooldied.setDescription("Pool has no back-end nodes responding")
noderesolvefailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 67)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: noderesolvefailure.setDescription("Failed to resolve node address")
noderesolvemultiple = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 68)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: noderesolvemultiple.setDescription("Node resolves to multiple IP addresses")
nodeworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 69)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ) )
if mibBuilder.loadTexts: nodeworking.setDescription("Node is working again")
nostarttls = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 70)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ) )
if mibBuilder.loadTexts: nostarttls.setDescription("Node doesn't provide STARTTLS support")
nodefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 71)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ) )
if mibBuilder.loadTexts: nodefail.setDescription("Node has failed")
starttlsinvalid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 72)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ) )
if mibBuilder.loadTexts: starttlsinvalid.setDescription("Node returned invalid STARTTLS response")
ehloinvalid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 73)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ) )
if mibBuilder.loadTexts: ehloinvalid.setDescription("Node returned invalid EHLO response")
flipperraiselocalworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 74)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: flipperraiselocalworking.setDescription("Raising Traffic IP Address; local machine is working")
flipperraiseothersdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 75)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: flipperraiseothersdead.setDescription("Raising Traffic IP Address; other machines have failed")
flipperraiseosdrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 76)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: flipperraiseosdrop.setDescription("Raising Traffic IP Address; Operating System had dropped this IP address")
dropipinfo = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 77)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: dropipinfo.setDescription("Dropping Traffic IP Address due to a configuration change or traffic manager recovery")
dropipwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 78)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: dropipwarn.setDescription("Dropping Traffic IP Address due to an error")
flipperdadreraise = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 79)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: flipperdadreraise.setDescription("Re-raising Traffic IP Address; Operating system did not fully raise the address")
flipperipexists = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 80)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ) )
if mibBuilder.loadTexts: flipperipexists.setDescription("Failed to raise Traffic IP Address; the address exists elsewhere on your network and cannot be raised")
triggersummary = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 81)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceProtName"), ) )
if mibBuilder.loadTexts: triggersummary.setDescription("Summary of recent service protection events")
slmclasslimitexceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 82)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: slmclasslimitexceeded.setDescription("SLM shared memory limit exceeded")
slmrecoveredwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 83)).setObjects(*(("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: slmrecoveredwarn.setDescription("SLM has recovered")
slmrecoveredserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 84)).setObjects(*(("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: slmrecoveredserious.setDescription("SLM has risen above the serious threshold")
slmfallenbelowwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 85)).setObjects(*(("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: slmfallenbelowwarn.setDescription("SLM has fallen below warning threshold")
slmfallenbelowserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 86)).setObjects(*(("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: slmfallenbelowserious.setDescription("SLM has fallen below serious threshold")
vscrloutofdate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 87)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vscrloutofdate.setDescription("CRL for a Certificate Authority is out of date")
vsstart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 88)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vsstart.setDescription("Virtual server started")
vsstop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 89)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vsstop.setDescription("Virtual server stopped")
privkeyok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 90)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: privkeyok.setDescription("Private key now OK (hardware available)")
ssldrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 91)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ssldrop.setDescription("Request(s) received while SSL configuration invalid, connection closed")
vslogwritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 92)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vslogwritefail.setDescription("Failed to write log file for virtual server")
vssslcertexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 93)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vssslcertexpired.setDescription("Public SSL certificate expired")
vssslcerttoexpire = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 94)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vssslcerttoexpire.setDescription("Public SSL certificate will expire within seven days")
vscacertexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 95)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vscacertexpired.setDescription("Certificate Authority certificate expired")
vscacerttoexpire = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 96)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: vscacerttoexpire.setDescription("Certificate Authority certificate will expire within seven days")
maxclientbufferdrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 97)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: maxclientbufferdrop.setDescription("Dropped connection, request exceeded max_client_buffer limit")
respcompfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 98)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: respcompfail.setDescription("Error compressing HTTP response")
responsetoolarge = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 99)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: responsetoolarge.setDescription("Response headers from webserver too large")
sipstreamnoports = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 100)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sipstreamnoports.setDescription("No suitable ports available for streaming data connection")
rtspstreamnoports = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 101)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: rtspstreamnoports.setDescription("No suitable ports available for streaming data connection")
geodataloadfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 102)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: geodataloadfail.setDescription("Failed to load geolocation data")
poolpersistencemismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 103)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: poolpersistencemismatch.setDescription("Pool uses a session persistence class that does not work with this virtual server's protocol")
connerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 104)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: connerror.setDescription("A protocol error has occurred")
connfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 105)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: connfail.setDescription("A socket connection failure has occurred")
badcontentlen = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 106)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ) )
if mibBuilder.loadTexts: badcontentlen.setDescription("HTTP response contained an invalid Content-Length header")
activatealldead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 107)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: activatealldead.setDescription("Activating this machine automatically because it is the only working machine in its Traffic IP Groups")
machinerecovered = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 108)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: machinerecovered.setDescription("Remote machine has recovered and can raise Traffic IP addresses")
flipperrecovered = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 109)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: flipperrecovered.setDescription("Machine is ready to raise Traffic IP addresses")
activatedautomatically = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 110)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: activatedautomatically.setDescription("Machine has recovered and been activated automatically because it would cause no service disruption")
zclustermoderr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 111)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: zclustermoderr.setDescription("An error occurred when using the zcluster Multi-Hosted IP kernel module")
ec2flipperraiselocalworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 112)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2flipperraiselocalworking.setDescription("Moving EC2 Elastic IP Address; local machine is working")
ec2flipperraiseothersdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 113)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2flipperraiseothersdead.setDescription("Moving EC2 Elastic IP Address; other machines have failed")
autherror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 114)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: autherror.setDescription("An error occurred during user authentication")
logfiledeleted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 115)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: logfiledeleted.setDescription("A virtual server request log file was deleted (Stingray Appliances only)")
license_graceperiodexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 116)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-graceperiodexpired")
if mibBuilder.loadTexts: license_graceperiodexpired.setDescription("Unable to authorize license key")
license_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 117)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-authorized")
if mibBuilder.loadTexts: license_authorized.setDescription("License key authorized")
license_rejected_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 118)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-rejected-authorized")
if mibBuilder.loadTexts: license_rejected_authorized.setDescription("License server rejected license key; key remains authorized")
license_rejected_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 119)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-rejected-unauthorized")
if mibBuilder.loadTexts: license_rejected_unauthorized.setDescription("License server rejected license key; key is not authorized")
license_timedout_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 120)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-timedout-authorized")
if mibBuilder.loadTexts: license_timedout_authorized.setDescription("Unable to contact license server; license key remains authorized")
license_timedout_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 121)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-timedout-unauthorized")
if mibBuilder.loadTexts: license_timedout_unauthorized.setDescription("Unable to contact license server; license key is not authorized")
license_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 122)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-unauthorized")
if mibBuilder.loadTexts: license_unauthorized.setDescription("License key is not authorized")
cachesizereduced = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 123)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: cachesizereduced.setDescription("Configured cache size exceeds license limit, only using amount allowed by license")
morememallowed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 124)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: morememallowed.setDescription("License allows more memory for caching")
lessmemallowed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 125)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: lessmemallowed.setDescription("License allows less memory for caching")
usedcredsdeleted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 126)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ) )
if mibBuilder.loadTexts: usedcredsdeleted.setDescription("A Cloud Credentials object has been deleted but it was still in use")
apistatusprocesshanging = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 127)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ) )
if mibBuilder.loadTexts: apistatusprocesshanging.setDescription("A cloud API process querying changes to cloud instances is hanging")
autonodedestroyed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 128)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodedestroyed.setDescription("A cloud API call to destroy a node has been started")
autoscalestatusupdateerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 129)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ) )
if mibBuilder.loadTexts: autoscalestatusupdateerror.setDescription("An API call made by the autoscaler process has reported an error")
ec2iperr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 130)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2iperr.setDescription("Problem occurred when managing an Elastic IP address")
dropec2ipwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 131)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: dropec2ipwarn.setDescription("Removing EC2 Elastic IP Address from all machines; it is no longer a part of any Traffic IP Groups")
ec2nopublicip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 132)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2nopublicip.setDescription("Cannot raise Elastic IP on this machine until EC2 provides it with a public IP address")
multihostload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 133)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: multihostload.setDescription("The amount of load handled by the local machine destined for this Traffic IP has changed")
tpslimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 134)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: tpslimited.setDescription("License key transactions-per-second limit has been hit")
ssltpslimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 135)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ssltpslimited.setDescription("License key SSL transactions-per-second limit has been hit")
bwlimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 136)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: bwlimited.setDescription("License key bandwidth limit has been hit")
licensetoomanylocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 137)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: licensetoomanylocations.setDescription("A location has been disabled because you have exceeded the licence limit")
autonodedestructioncomplete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 138)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodedestructioncomplete.setDescription("The destruction of a node in an autoscaled pool is now complete")
autonodeexisted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 139)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodeexisted.setDescription("IP address of newly created instance already existed in pool's node list")
autoscaledpooltoosmall = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 140)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscaledpooltoosmall.setDescription("Minimum size undercut - growing")
autoscaleinvalidargforcreatenode = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 141)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscaleinvalidargforcreatenode.setDescription("The 'imageid' was empty when attempting to create a node in an autoscaled pool")
autonodedisappeared = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 142)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodedisappeared.setDescription("A node in an autoscaled pool has disappeared from the cloud")
autoscaledpoolrefractory = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 143)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscaledpoolrefractory.setDescription("An autoscaled pool is now refractory")
cannotshrinkemptypool = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 144)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: cannotshrinkemptypool.setDescription("Attempt to scale down a pool that only had pending nodes or none at all")
autoscalinghysteresiscantgrow = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 145)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalinghysteresiscantgrow.setDescription("An autoscaled pool is waiting to grow")
autonodecreationcomplete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 146)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodecreationcomplete.setDescription("The creation of a new node requested by an autoscaled pool is now complete")
autonodestatuschange = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 147)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodestatuschange.setDescription("The status of a node in an autoscaled pool has changed")
autoscalinghysteresiscantshrink = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 148)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalinghysteresiscantshrink.setDescription("An autoscaled pool is waiting to shrink")
autoscalingpoolstatechange = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 149)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalingpoolstatechange.setDescription("An autoscaled pool's state has changed")
glbmissingips = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 150)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbmissingips.setDescription("A DNS Query returned IP addresses that are not configured in any location")
glbnolocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 151)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbnolocations.setDescription("No valid location could be chosen for Global Load Balancing")
locationmonitorok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 152)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locationmonitorok.setDescription("A monitor has indicated this location is now working")
locationmonitorfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 153)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locationmonitorfail.setDescription("A monitor has detected a failure in this location")
locationok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 154)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locationok.setDescription("Location is now working for GLB Service")
locationfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 155)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locationfail.setDescription("Location has failed for GLB Service")
locationsoapok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 156)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locationsoapok.setDescription("An external SOAP agent indicates this location is now working")
locationsoapfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 157)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locationsoapfail.setDescription("An external SOAP agent has detected a failure in this location")
glbdeadlocmissingips = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 158)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbdeadlocmissingips.setDescription("A DNS Query returned IP addresses that are not configured for any location that is currently alive")
autoscaleresponseparseerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 159)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ) )
if mibBuilder.loadTexts: autoscaleresponseparseerror.setDescription("An API call made by the autoscaler process has returned a response that could not be parsed")
glbnewmaster = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 160)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbnewmaster.setDescription("A location has been set as active for a GLB service")
glblogwritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 161)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glblogwritefail.setDescription("Failed to write log file for GLB service")
glbfailalter = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 162)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbfailalter.setDescription("Failed to alter DNS packet for global load balancing")
autoscalednodecontested = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 163)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalednodecontested.setDescription("Two pools are trying to use the same instance")
autoscalepoolconfupdate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 164)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalepoolconfupdate.setDescription("A pool config file has been updated by the autoscaler process")
autonodecreationstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 165)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodecreationstarted.setDescription("Creation of new node instigated")
autoscaleinvalidargfordeletenode = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 166)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscaleinvalidargfordeletenode.setDescription("'unique id' was empty when attempting to destroy a node in an autoscaled pool")
autoscalinghitroof = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 167)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalinghitroof.setDescription("Maximum size reached by autoscaled pool, cannot grow further")
autoscalinghitfloor = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 168)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalinghitfloor.setDescription("Minimum size reached, cannot shrink further")
apichangeprocesshanging = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 169)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: apichangeprocesshanging.setDescription("API change process still running after refractory period is over")
autoscaledpooltoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 170)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscaledpooltoobig.setDescription("Over maximum size - shrinking")
autoscalingprocesstimedout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 171)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ) )
if mibBuilder.loadTexts: autoscalingprocesstimedout.setDescription("A cloud API process has timed out")
autoscalingdisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 172)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalingdisabled.setDescription("Autoscaling for a pool has been disabled due to errors communicating with the cloud API")
locmovemachine = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 173)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"), ) )
if mibBuilder.loadTexts: locmovemachine.setDescription("Machine now in location")
locempty = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 174)).setObjects(*(("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: locempty.setDescription("Location no longer contains any machines")
autoscalinglicenseerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 175)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: autoscalinglicenseerror.setDescription("Autoscaling not permitted by licence key")
autoscalinglicenseenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 176)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: autoscalinglicenseenabled.setDescription("Autoscaling support has been enabled")
autoscalinglicensedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 177)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: autoscalinglicensedisabled.setDescription("Autoscaling support has been disabled")
confreptimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 178)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: confreptimeout.setDescription("Replication of configuration has timed out")
confrepfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 179)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: confrepfailed.setDescription("Replication of configuration has failed")
analyticslicenseenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 180)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: analyticslicenseenabled.setDescription("Realtime Analytics support has been enabled")
analyticslicensedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 181)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: analyticslicensedisabled.setDescription("Realtime Analytics support has been disabled")
autoscalingchangeprocessfailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 182)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalingchangeprocessfailure.setDescription("An API process that should have created or destroyed a node has failed to produce the expected result")
autoscalewrongimageid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 183)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalewrongimageid.setDescription("A node created by the autoscaler has the wrong imageid")
autoscalewrongname = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 184)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalewrongname.setDescription("A node created by the autoscaler has a non-matching name")
autoscalewrongsizeid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 185)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalewrongsizeid.setDescription("A node created by the autoscaler has the wrong sizeid")
logdiskoverload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 186)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: logdiskoverload.setDescription("Log disk partition usage has exceeded threshold")
logdiskfull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 187)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: logdiskfull.setDescription("Log disk partition full")
autoscalingresuscitatepool = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 188)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscalingresuscitatepool.setDescription("An autoscaled pool has failed completely")
zxtmhighload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 189)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: zxtmhighload.setDescription("The number of simultaneously active connections has reached a level that the software cannot process in due time; there is a high risk of connections timing out")
glbservicedied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 190)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbservicedied.setDescription("GLB Service has no working locations")
glbserviceok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 191)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbserviceok.setDescription("GLB Service has recovered")
license_rejected_unauthorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 192)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-rejected-unauthorized-ts")
if mibBuilder.loadTexts: license_rejected_unauthorized_ts.setDescription("License key rejected from authorization code")
license_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 193)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-authorized-ts")
if mibBuilder.loadTexts: license_authorized_ts.setDescription("License key authorized by authorization code")
license_rejected_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 194)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-rejected-authorized-ts")
if mibBuilder.loadTexts: license_rejected_authorized_ts.setDescription("License key rejected from authorization code; key remains authorized")
license_timedout_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 195)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-timedout-authorized-ts")
if mibBuilder.loadTexts: license_timedout_authorized_ts.setDescription("Unable to run authorization code to completion; key remains valid")
license_timedout_unauthorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 196)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-timedout-unauthorized-ts")
if mibBuilder.loadTexts: license_timedout_unauthorized_ts.setDescription("Unable to run authorization code to completion")
license_graceperiodexpired_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 197)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-graceperiodexpired-ts")
if mibBuilder.loadTexts: license_graceperiodexpired_ts.setDescription("Unable to authorize license key")
flipperraiseremotedropped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 198)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: flipperraiseremotedropped.setDescription("This Traffic Manager has re-raised traffic IP addresses as the remote machine which was hosting them has dropped them")
sslrehandshakemininterval = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 199)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslrehandshakemininterval.setDescription("SSL re-handshake requests have exceeded the frequency permitted by configuration")
sslhandshakemsgsizelimit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 200)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslhandshakemsgsizelimit.setDescription("SSL handshake messages have exceeded the size permitted by configuration")
sslcrltoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 201)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: sslcrltoobig.setDescription("CRL does not fit in the configured amount of shared memory, increase ssl!crl_mem!size and restart software")
numpools_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 202)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) ).setLabel("numpools-exceeded")
if mibBuilder.loadTexts: numpools_exceeded.setDescription("Total number of pools exceeded the maximum limit")
numlocations_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 203)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) ).setLabel("numlocations-exceeded")
if mibBuilder.loadTexts: numlocations_exceeded.setDescription("Total number of locations exceeded the maximum limit")
numtipg_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 204)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) ).setLabel("numtipg-exceeded")
if mibBuilder.loadTexts: numtipg_exceeded.setDescription("Total number of traffic IP group exceeded the maximum limit")
numnodes_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 205)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) ).setLabel("numnodes-exceeded")
if mibBuilder.loadTexts: numnodes_exceeded.setDescription("Total number of nodes exceeded the maximum number of nodes that can be monitored")
ec2nosecondaryprivateip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 206)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2nosecondaryprivateip.setDescription("Cannot raise Elastic IP on this machine as no suitable secondary IP is available on the allowed network card(s)")
ec2vpceipassocerr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 207)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2vpceipassocerr.setDescription("Problem occurred while getting a list of private IP addresses and their EIP associations")
ec2vpciderr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 208)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2vpciderr.setDescription("Problem occurred while getting VPCID")
license_explicitlydisabled_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 209)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ) ).setLabel("license-explicitlydisabled-ts")
if mibBuilder.loadTexts: license_explicitlydisabled_ts.setDescription("License key explicitly disabled from authorization code")
rulestreamerrortoomuch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 210)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrortoomuch.setDescription("Rule supplied too much data in HTTP stream")
rulestreamerrornotenough = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 211)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrornotenough.setDescription("Rule did not supply enough data in HTTP stream")
rulestreamerrorprocessfailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 212)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrorprocessfailure.setDescription("Data supplied to HTTP stream could not be processed")
rulestreamerrornotstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 213)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrornotstarted.setDescription("Attempt to stream data or finish a stream before streaming had been initialized")
rulestreamerrornotfinished = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 214)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrornotfinished.setDescription("Attempt to initialize HTTP stream before previous stream had finished")
rulestreamerrorinternal = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 215)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrorinternal.setDescription("Internal error while processing HTTP stream")
rulestreamerrorgetresponse = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 216)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulestreamerrorgetresponse.setDescription("Attempt to use http.getResponse or http.getResponseBody after http.stream.startResponse")
rulesinvalidrequestbody = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 217)).setObjects(*(("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: rulesinvalidrequestbody.setDescription("Client sent invalid HTTP request body")
serviceruleabort = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 218)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: serviceruleabort.setDescription("GLB service rule aborted during execution")
servicerulelocunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 219)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: servicerulelocunknown.setDescription("GLB service rule specified an unknown location")
servicerulelocnotconfigured = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 220)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: servicerulelocnotconfigured.setDescription("GLB service rule specified a location that is not configured for the service")
servicerulelocdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 221)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: servicerulelocdead.setDescription("GLB service rule specified a location that has either failed or been marked as draining in the service configuration")
aptimizeuseunknownprofile = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 222)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: aptimizeuseunknownprofile.setDescription("Rule selected an unknown Aptimizer profile")
aptimizedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 223)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: aptimizedisabled.setDescription("Rule attempted to use Aptimizer but it is not enabled")
aptimizeuseunknownscope = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 224)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: aptimizeuseunknownscope.setDescription("Rule selected an unknown Aptimizer scope")
childcommsfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 225)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: childcommsfail.setDescription("There was an error communicating with a child process")
childhung = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 226)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: childhung.setDescription("The child process did not respond within the configured time")
childkilled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 227)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: childkilled.setDescription("The child process has been killed because it did not respond to control requests within the configured time")
datalocalstorefull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 228)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: datalocalstorefull.setDescription("data.local.set() has run out of space")
fipsfailinit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 229)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: fipsfailinit.setDescription("FIPS 140-2 cryptographic module initialization failed")
fipsfailops = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 230)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: fipsfailops.setDescription("FIPS 140-2 cryptographic module operations failed")
clocknotmonotonic = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 231)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: clocknotmonotonic.setDescription("The monotonic system clock went backwards")
clockjump = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 232)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: clockjump.setDescription("The system clock jumped forwards or backwards by more than one second")
rebootrequired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 233)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: rebootrequired.setDescription("Machine must be rebooted to apply configuration changes")
ocspstaplingfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 234)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ocspstaplingfail.setDescription("OCSP request (for OCSP stapling) failed")
ocspstaplingnomem = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 235)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ocspstaplingnomem.setDescription("Insufficient memory for OCSP stapling")
appliance = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 236)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: appliance.setDescription("Appliance notification")
pingsendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 237)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: pingsendfail.setDescription("Failed to send ping packets")
autonodenopublicip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 238)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonodenopublicip.setDescription("Node has no public IP address")
ocspstaplingrevoked = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 239)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ocspstaplingrevoked.setDescription("An OCSP request (for OCSP stapling) reported that a certificate was revoked")
ocspstaplingunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 240)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ocspstaplingunknown.setDescription("An OCSP request (for OCSP stapling) reported that a certificate was unknown")
ocspstaplingunrevoked = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 241)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ocspstaplingunrevoked.setDescription("An old but good OCSP response was returned for a revoked certificate")
ruleoverrun = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 242)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ) )
if mibBuilder.loadTexts: ruleoverrun.setDescription("Rule exceeded execution time warning threshold")
appfirewallcontrolstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 243)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: appfirewallcontrolstarted.setDescription("Application firewall started")
autonoderemoved = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 244)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autonoderemoved.setDescription("A node in an DNS-derived autoscaled pool has been removed")
routingswoperational = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 245)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: routingswoperational.setDescription("Routing software is now operational")
routingswfailurelimitreached = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 246)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: routingswfailurelimitreached.setDescription("Routing software has failed and reached its failure limit")
routingswfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 247)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: routingswfailed.setDescription("Routing software had a major failure and will be restarted")
routingswstartfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 248)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: routingswstartfailed.setDescription("Routing software failed to start")
appfirewallcontrolstopped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 249)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: appfirewallcontrolstopped.setDescription("Application firewall stopped")
appfirewallcontrolrestarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 250)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: appfirewallcontrolrestarted.setDescription("Application firewall restarted")
appfirewallcontroltimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 251)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: appfirewallcontroltimeout.setDescription("Application firewall control command timed out")
appfirewallcontrolerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 252)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: appfirewallcontrolerror.setDescription("Application firewall control command failed")
ospfneighborsok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 253)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ospfneighborsok.setDescription("All monitored OSPF neighbors are peered")
ospfneighborsdegraded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 254)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ospfneighborsdegraded.setDescription("Some of the monitored OSPF neighbors are not peered")
ospfneighborsfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 255)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ospfneighborsfailed.setDescription("None of the monitored OSPF neighbors are peered")
nameserverunavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 256)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: nameserverunavailable.setDescription("DNS-derived Autoscaling will not update, as the DNS server is unavailable")
nameserveravailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 257)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: nameserveravailable.setDescription("DNS-derived Autoscaling will resume updating, as the DNS server is now responding")
autoscaleresolvefailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 258)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"), ) )
if mibBuilder.loadTexts: autoscaleresolvefailure.setDescription("A hostname used for DNS-derived Autoscaling doesn't resolve")
glbtoomanylocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 259)).setObjects(*(("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: glbtoomanylocations.setDescription("There are too many Data Centers configured and the Global Load Balancing feature is not guaranteed to work reliably with more than 255 Data Centres")
dnszonevalidate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 260)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: dnszonevalidate.setDescription("The built-in DNS server has failed to validate a DNS zone file")
dnszonecreaterecord = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 261)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: dnszonecreaterecord.setDescription("The built-in DNS server has failed to create a DNS record")
dnszoneparsechild = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 262)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: dnszoneparsechild.setDescription("The built-in DNS server has failed to parse a DNS zone file")
dnserroraddzone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 263)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: dnserroraddzone.setDescription("The built-in DNS server has failed to add a DNS zone")
dnsaddzone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 264)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: dnsaddzone.setDescription("The built-in DNS server has successfully added a DNS zone")
dnszoneparse = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 265)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: dnszoneparse.setDescription("The built-in DNS server has failed to parse a DNS zone file")
ec2dataretrievalfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 266)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2dataretrievalfailed.setDescription("Traffic manager failed to get the required data from Amazon servers")
ec2dataretrievalsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 267)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ) )
if mibBuilder.loadTexts: ec2dataretrievalsuccessful.setDescription("Traffic manager has now successfully retrieved the required data from Amazon servers")
dnszonedelete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 268)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: dnszonedelete.setDescription("DNS zone has been deleted")
dnserrordeletezone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 269)).setObjects(*(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "confName"), ) )
if mibBuilder.loadTexts: dnserrordeletezone.setDescription("The built-in DNS server has failed to delete a DNS zone")

# Groups

mainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 1)).setObjects(*(("ZXTM-MIB-SMIv2", "sslSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "sslCipher3DESDecrypts"), ("ZXTM-MIB-SMIv2", "listenIPCurrentConn"), ("ZXTM-MIB-SMIv2", "sslCipherEncrypts"), ("ZXTM-MIB-SMIv2", "uniSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "uniSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv1"), ("ZXTM-MIB-SMIv2", "totalCurrentConn"), ("ZXTM-MIB-SMIv2", "eventName"), ("ZXTM-MIB-SMIv2", "totalDNSResponses"), ("ZXTM-MIB-SMIv2", "sslCipher3DESEncrypts"), ("ZXTM-MIB-SMIv2", "authenticatorErrors"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "rateClassCurrentRate"), ("ZXTM-MIB-SMIv2", "sslCipherDSASigns"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMax"), ("ZXTM-MIB-SMIv2", "perLocationServiceFrontendState"), ("ZXTM-MIB-SMIv2", "perPoolNodeState"), ("ZXTM-MIB-SMIv2", "nodeInet46IdleConns"), ("ZXTM-MIB-SMIv2", "rateClassConnsEntered"), ("ZXTM-MIB-SMIv2", "ruleResponds"), ("ZXTM-MIB-SMIv2", "interfaceNumber"), ("ZXTM-MIB-SMIv2", "hourlyPeakBytesInPerSecond"), ("ZXTM-MIB-SMIv2", "nodeInet46CurrentConn"), ("ZXTM-MIB-SMIv2", "virtualserverConnectTimedOut"), ("ZXTM-MIB-SMIv2", "version"), ("ZXTM-MIB-SMIv2", "listenIPBytesOut"), ("ZXTM-MIB-SMIv2", "ipSessionCacheHits"), ("ZXTM-MIB-SMIv2", "ipSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "ipSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "sysCPUSystemBusyPercent"), ("ZXTM-MIB-SMIv2", "authenticatorNumber"), ("ZXTM-MIB-SMIv2", "sslSessionIDMemCacheHit"), ("ZXTM-MIB-SMIv2", "virtualserverHttpRewriteLocation"), ("ZXTM-MIB-SMIv2", "userCounterName"), ("ZXTM-MIB-SMIv2", "eventsMatched"), ("ZXTM-MIB-SMIv2", "webCacheOldest"), ("ZXTM-MIB-SMIv2", "zxtmName"), ("ZXTM-MIB-SMIv2", "uniSessionCacheHits"), ("ZXTM-MIB-SMIv2", "poolBytesOut"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNode"), ("ZXTM-MIB-SMIv2", "ipSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "monitorNumber"), ("ZXTM-MIB-SMIv2", "numberChildProcesses"), ("ZXTM-MIB-SMIv2", "sslClientCertRevoked"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheLookups"), ("ZXTM-MIB-SMIv2", "virtualserverSIPTotalCalls"), ("ZXTM-MIB-SMIv2", "numberSNMPBadRequests"), ("ZXTM-MIB-SMIv2", "rateClassQueueLength"), ("ZXTM-MIB-SMIv2", "sslHandshakeSSLv2"), ("ZXTM-MIB-SMIv2", "sslHandshakeSSLv3"), ("ZXTM-MIB-SMIv2", "sslSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "perPoolNodeTotalConn"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "nodeInet46HostName"), ("ZXTM-MIB-SMIv2", "interfaceRxPackets"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddressType"), ("ZXTM-MIB-SMIv2", "sslCipherDESEncrypts"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalIP"), ("ZXTM-MIB-SMIv2", "sslClientCertNotSent"), ("ZXTM-MIB-SMIv2", "trafficIPPingResponseErrors"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalBinary"), ("ZXTM-MIB-SMIv2", "glbServiceResponses"), ("ZXTM-MIB-SMIv2", "ruleNumber"), ("ZXTM-MIB-SMIv2", "sslCipherRSAEncryptsExternal"), ("ZXTM-MIB-SMIv2", "sslCipherRSAEncrypts"), ("ZXTM-MIB-SMIv2", "virtualserverCurrentConn"), ("ZXTM-MIB-SMIv2", "hourlyPeakSSLConnectionsPerSecond"), ("ZXTM-MIB-SMIv2", "steelheadName"), ("ZXTM-MIB-SMIv2", "poolQueueTimeouts"), ("ZXTM-MIB-SMIv2", "nodeInet46NewConn"), ("ZXTM-MIB-SMIv2", "rulePoolSelect"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "perLocationServiceDraining"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSaved"), ("ZXTM-MIB-SMIv2", "poolName"), ("ZXTM-MIB-SMIv2", "perLocationServiceState"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodePort"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMax"), ("ZXTM-MIB-SMIv2", "sysMemInUse"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOut"), ("ZXTM-MIB-SMIv2", "nodeInet46CurrentRequests"), ("ZXTM-MIB-SMIv2", "perLocationServiceResponses"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingGoodCount"), ("ZXTM-MIB-SMIv2", "sslCipherDHGenerates"), ("ZXTM-MIB-SMIv2", "nodeInet46State"), ("ZXTM-MIB-SMIv2", "trafficIPInet46State"), ("ZXTM-MIB-SMIv2", "virtualserverMaxDurationTimedOut"), ("ZXTM-MIB-SMIv2", "perLocationServiceName"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusResponses"), ("ZXTM-MIB-SMIv2", "sslCipherAESDecrypts"), ("ZXTM-MIB-SMIv2", "webCacheMaxEntries"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46TotalNonConf"), ("ZXTM-MIB-SMIv2", "numberDNSARequests"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddress"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "poolState"), ("ZXTM-MIB-SMIv2", "ipSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "serviceProtNumber"), ("ZXTM-MIB-SMIv2", "timeLastConfigUpdate"), ("ZXTM-MIB-SMIv2", "aspSessionCacheHits"), ("ZXTM-MIB-SMIv2", "sslCipherDSAVerifies"), ("ZXTM-MIB-SMIv2", "ipSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "locationResponses"), ("ZXTM-MIB-SMIv2", "ruleDiscards"), ("ZXTM-MIB-SMIv2", "sslCipherRC4Decrypts"), ("ZXTM-MIB-SMIv2", "webCacheHits"), ("ZXTM-MIB-SMIv2", "licensekeyNumber"), ("ZXTM-MIB-SMIv2", "webCacheMemUsed"), ("ZXTM-MIB-SMIv2", "serviceLevelConforming"), ("ZXTM-MIB-SMIv2", "sslSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheHits"), ("ZXTM-MIB-SMIv2", "rateClassMaxRatePerMin"), ("ZXTM-MIB-SMIv2", "sslCipherRSADecryptsExternal"), ("ZXTM-MIB-SMIv2", "dataMemoryUsage"), ("ZXTM-MIB-SMIv2", "serviceLevelTotalConn"), ("ZXTM-MIB-SMIv2", "sslCipherRC4Encrypts"), ("ZXTM-MIB-SMIv2", "numIdleConnections"), ("ZXTM-MIB-SMIv2", "nodeInet46Errors"), ("ZXTM-MIB-SMIv2", "aspSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "trafficIPGatewayPingRequests"), ("ZXTM-MIB-SMIv2", "interfaceName"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMin"), ("ZXTM-MIB-SMIv2", "rateClassConnsLeft"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMean"), ("ZXTM-MIB-SMIv2", "virtualserverTotalConn"), ("ZXTM-MIB-SMIv2", "sslSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "perLocationServiceMonitorState"), ("ZXTM-MIB-SMIv2", "rateClassName"), ("ZXTM-MIB-SMIv2", "poolMeanQueueTime"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusRequests"), ("ZXTM-MIB-SMIv2", "sslSessionIDMemCacheMiss"), ("ZXTM-MIB-SMIv2", "interfaceTxErrors"), ("ZXTM-MIB-SMIv2", "locationLoad"), ("ZXTM-MIB-SMIv2", "bandwidthClassNumber"), ("ZXTM-MIB-SMIv2", "aspSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "perLocationServiceLocationCode"), ("ZXTM-MIB-SMIv2", "userCounterNumber"), ("ZXTM-MIB-SMIv2", "numberSNMPGetNextRequests"), ("ZXTM-MIB-SMIv2", "interfaceTxBytes"), ("ZXTM-MIB-SMIv2", "webCacheMemMaximum"), ("ZXTM-MIB-SMIv2", "serviceLevelCurrentConns"), ("ZXTM-MIB-SMIv2", "aspSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingSuccessCount"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNode"), ("ZXTM-MIB-SMIv2", "sslCacheHits"), ("ZXTM-MIB-SMIv2", "perLocationServiceLoad"), ("ZXTM-MIB-SMIv2", "listenIPMaxConn"), ("ZXTM-MIB-SMIv2", "nodeInet46Failures"), ("ZXTM-MIB-SMIv2", "nodeInet46PooledConn"), ("ZXTM-MIB-SMIv2", "perLocationServiceLocationName"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingCount"), ("ZXTM-MIB-SMIv2", "glbServiceUnmodified"), ("ZXTM-MIB-SMIv2", "sslCipherAESGCMDecrypts"), ("ZXTM-MIB-SMIv2", "listenIPAddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ("ZXTM-MIB-SMIv2", "rateClassMaxRatePerSec"), ("ZXTM-MIB-SMIv2", "interfaceTxPackets"), ("ZXTM-MIB-SMIv2", "virtualserverKeepaliveTimedOut"), ("ZXTM-MIB-SMIv2", "interfaceRxErrors"), ("ZXTM-MIB-SMIv2", "zxtmNumber"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConc1IP"), ("ZXTM-MIB-SMIv2", "sslCacheHitRate"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNode"), ("ZXTM-MIB-SMIv2", "interfaceRxBytes"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMax"), ("ZXTM-MIB-SMIv2", "authenticatorName"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheHitRate"), ("ZXTM-MIB-SMIv2", "serviceLevelNumber"), ("ZXTM-MIB-SMIv2", "ipSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "aspSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "poolNodes"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ("ZXTM-MIB-SMIv2", "totalBackendServerErrors"), ("ZXTM-MIB-SMIv2", "numberDNSPTRRequests"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMin"), ("ZXTM-MIB-SMIv2", "trafficIPGatewayPingResponses"), ("ZXTM-MIB-SMIv2", "perPoolNodePooledConn"), ("ZXTM-MIB-SMIv2", "webCacheMisses"), ("ZXTM-MIB-SMIv2", "perPoolNodeNumber"), ("ZXTM-MIB-SMIv2", "virtualserverDataTimedOut"), ("ZXTM-MIB-SMIv2", "poolDisabled"), ("ZXTM-MIB-SMIv2", "cloudcredentialsClassNumber"), ("ZXTM-MIB-SMIv2", "poolMinQueueTime"), ("ZXTM-MIB-SMIv2", "userCounter64Value"), ("ZXTM-MIB-SMIv2", "poolBytesIn"), ("ZXTM-MIB-SMIv2", "actionsProcessed"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv12"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv11"), ("ZXTM-MIB-SMIv2", "sslClientCertExpired"), ("ZXTM-MIB-SMIv2", "sslCacheMisses"), ("ZXTM-MIB-SMIv2", "bandwidthClassName"), ("ZXTM-MIB-SMIv2", "authenticatorRequests"), ("ZXTM-MIB-SMIv2", "sslConnections"), ("ZXTM-MIB-SMIv2", "eventsSeen"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ("ZXTM-MIB-SMIv2", "trafficIPNumberInet46"), ("ZXTM-MIB-SMIv2", "serviceLevelTotalNonConf"), ("ZXTM-MIB-SMIv2", "perPoolNodeNewConn"), ("ZXTM-MIB-SMIv2", "bandwidthClassGuarantee"), ("ZXTM-MIB-SMIv2", "cloudcredentialsNodeCreations"), ("ZXTM-MIB-SMIv2", "uniSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "totalRequests"), ("ZXTM-MIB-SMIv2", "nodeInet46TotalConn"), ("ZXTM-MIB-SMIv2", "poolNumber"), ("ZXTM-MIB-SMIv2", "sslSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "numberDNSPTRCacheHits"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingRevokedCount"), ("ZXTM-MIB-SMIv2", "poolFailPool"), ("ZXTM-MIB-SMIv2", "virtualserverDiscard"), ("ZXTM-MIB-SMIv2", "sysMemBuffered"), ("ZXTM-MIB-SMIv2", "virtualserverConnectionErrors"), ("ZXTM-MIB-SMIv2", "sslCipherAESEncrypts"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "uniSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "serviceProtName"), ("ZXTM-MIB-SMIv2", "rateClassNumber"), ("ZXTM-MIB-SMIv2", "virtualserverGzip"), ("ZXTM-MIB-SMIv2", "sslCipherDESDecrypts"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNode"), ("ZXTM-MIB-SMIv2", "webCacheEntries"), ("ZXTM-MIB-SMIv2", "totalTransactions"), ("ZXTM-MIB-SMIv2", "poolMaxQueueTime"), ("ZXTM-MIB-SMIv2", "sslSessionCacheHits"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalRFC2396"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingUnknownCount"), ("ZXTM-MIB-SMIv2", "nodeInet46Address"), ("ZXTM-MIB-SMIv2", "nodeInet46AddressType"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "sslCipherRSADecrypts"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "virtualserverPort"), ("ZXTM-MIB-SMIv2", "serviceProtLastRefusalTime"), ("ZXTM-MIB-SMIv2", "glbServiceNumber"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "interfaceCollisions"), ("ZXTM-MIB-SMIv2", "virtualserverHttpRewriteCookie"), ("ZXTM-MIB-SMIv2", "cloudcredentialsNodeDeletions"), ("ZXTM-MIB-SMIv2", "bandwidthClassMaximum"), ("ZXTM-MIB-SMIv2", "trafficIPNodePingRequests"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingCacheCount"), ("ZXTM-MIB-SMIv2", "userCounter64Name"), ("ZXTM-MIB-SMIv2", "perPoolNodeCurrentConn"), ("ZXTM-MIB-SMIv2", "sysMemSwapped"), ("ZXTM-MIB-SMIv2", "sysMemFree"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMin"), ("ZXTM-MIB-SMIv2", "monitorName"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMin"), ("ZXTM-MIB-SMIv2", "cloudcredentialsStatusRequests"), ("ZXTM-MIB-SMIv2", "virtualserverProtocol"), ("ZXTM-MIB-SMIv2", "uniSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "sslCacheLookups"), ("ZXTM-MIB-SMIv2", "sysCPUUserBusyPercent"), ("ZXTM-MIB-SMIv2", "uniSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "totalBytesOut"), ("ZXTM-MIB-SMIv2", "perPoolNodeCurrentRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPUnauthorisedRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPGetBulkRequests"), ("ZXTM-MIB-SMIv2", "sysMemTotal"), ("ZXTM-MIB-SMIv2", "sslCipherDecrypts"), ("ZXTM-MIB-SMIv2", "webCacheHitRate"), ("ZXTM-MIB-SMIv2", "hourlyPeakBytesOutPerSecond"), ("ZXTM-MIB-SMIv2", "authenticatorFails"), ("ZXTM-MIB-SMIv2", "virtualserverNumber"), ("ZXTM-MIB-SMIv2", "poolAlgorithm"), ("ZXTM-MIB-SMIv2", "poolDraining"), ("ZXTM-MIB-SMIv2", "sslCipherAESGCMEncrypts"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConnRate"), ("ZXTM-MIB-SMIv2", "virtualserverDefaultTrafficPool"), ("ZXTM-MIB-SMIv2", "nodeNumberInet46"), ("ZXTM-MIB-SMIv2", "eventNumber"), ("ZXTM-MIB-SMIv2", "virtualserverTotalDgram"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "ruleRetries"), ("ZXTM-MIB-SMIv2", "virtualserverConnectionFailures"), ("ZXTM-MIB-SMIv2", "serviceProtTotalRefusal"), ("ZXTM-MIB-SMIv2", "sslCacheEntries"), ("ZXTM-MIB-SMIv2", "sysCPUBusyPercent"), ("ZXTM-MIB-SMIv2", "poolPersistence"), ("ZXTM-MIB-SMIv2", "poolSessionMigrated"), ("ZXTM-MIB-SMIv2", "numberSNMPGetRequests"), ("ZXTM-MIB-SMIv2", "trafficIPNumberRaisedInet46"), ("ZXTM-MIB-SMIv2", "virtualserverUdpTimedOut"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConc10IP"), ("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "ruleExecutionTimeWarnings"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeHostName"), ("ZXTM-MIB-SMIv2", "listenIPBytesIn"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingFailureCount"), ("ZXTM-MIB-SMIv2", "listenIPAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeErrors"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMean"), ("ZXTM-MIB-SMIv2", "ruleName"), ("ZXTM-MIB-SMIv2", "locationCode"), ("ZXTM-MIB-SMIv2", "steelheadNumber"), ("ZXTM-MIB-SMIv2", "actionName"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMean"), ("ZXTM-MIB-SMIv2", "trafficIPNodePingResponses"), ("ZXTM-MIB-SMIv2", "ruleAborts"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Time"), ("ZXTM-MIB-SMIv2", "upTime"), ("ZXTM-MIB-SMIv2", "trafficIPARPMessage"), ("ZXTM-MIB-SMIv2", "perPoolNodeIdleConns"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMean"), ("ZXTM-MIB-SMIv2", "totalConn"), ("ZXTM-MIB-SMIv2", "webCacheLookups"), ("ZXTM-MIB-SMIv2", "sysFDsFree"), ("ZXTM-MIB-SMIv2", "customEventName"), ("ZXTM-MIB-SMIv2", "userCounterValue"), ("ZXTM-MIB-SMIv2", "sysMemSwapTotal"), ("ZXTM-MIB-SMIv2", "actionNumber"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46TotalConn"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalSize"), ("ZXTM-MIB-SMIv2", "poolTotalConn"), ("ZXTM-MIB-SMIv2", "sslCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "perPoolNodeFailures"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOut"), ("ZXTM-MIB-SMIv2", "totalBytesIn"), ("ZXTM-MIB-SMIv2", "steelheadOptimized"), ("ZXTM-MIB-SMIv2", "ruleExecutions"), ("ZXTM-MIB-SMIv2", "aspSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "virtualserverSIPRejectedRequests"), ("ZXTM-MIB-SMIv2", "sysCPUIdlePercent"), ("ZXTM-MIB-SMIv2", "sslCacheOldest"), ("ZXTM-MIB-SMIv2", "sslSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "serviceLevelIsOK"), ("ZXTM-MIB-SMIv2", "nodeInet46Port"), ("ZXTM-MIB-SMIv2", "virtualserverProcessingTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverMaxConn"), ("ZXTM-MIB-SMIv2", "virtualserverBytesIn"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMax"), ("ZXTM-MIB-SMIv2", "numberDNSACacheHits"), ("ZXTM-MIB-SMIv2", "sslClientCertInvalid"), ("ZXTM-MIB-SMIv2", "poolConnsQueued"), ("ZXTM-MIB-SMIv2", "hourlyPeakRequestsPerSecond"), ("ZXTM-MIB-SMIv2", "virtualserverDirectReplies"), ("ZXTM-MIB-SMIv2", "sslCipherDHAgreements"), ("ZXTM-MIB-SMIv2", "rateClassDropped"), ("ZXTM-MIB-SMIv2", "aspSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "totalBadDNSPackets"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46SLMName"), ("ZXTM-MIB-SMIv2", "glbServiceDiscarded"), ("ZXTM-MIB-SMIv2", "listenIPTotalConn"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheHits"), ("ZXTM-MIB-SMIv2", "dataEntries"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "authenticatorPasses"), ) )
if mibBuilder.loadTexts: mainGroup.setDescription("Main conformance group")
deprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 2)).setObjects(*(("ZXTM-MIB-SMIv2", "sslSessionIDDiskCacheHit"), ("ZXTM-MIB-SMIv2", "sslSessionIDDiskCacheMiss"), ) )
if mibBuilder.loadTexts: deprecatedGroup.setDescription("Deprecated objects")
obsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 3)).setObjects(*(("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNodeLo"), ("ZXTM-MIB-SMIv2", "totalBytesOutHi"), ("ZXTM-MIB-SMIv2", "nodeFailures"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOutLo"), ("ZXTM-MIB-SMIv2", "totalBytesOutLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOutHi"), ("ZXTM-MIB-SMIv2", "webCacheMissesHi"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelSLMName"), ("ZXTM-MIB-SMIv2", "nodeCurrentConn"), ("ZXTM-MIB-SMIv2", "webCacheLookupsHi"), ("ZXTM-MIB-SMIv2", "trafficIPState"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMax"), ("ZXTM-MIB-SMIv2", "trafficIPAddress"), ("ZXTM-MIB-SMIv2", "nodeBytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "poolBytesOutHi"), ("ZXTM-MIB-SMIv2", "nodeHostName"), ("ZXTM-MIB-SMIv2", "listenIPBytesInLo"), ("ZXTM-MIB-SMIv2", "nodeNumber"), ("ZXTM-MIB-SMIv2", "poolBytesInHi"), ("ZXTM-MIB-SMIv2", "listenIPBytesOutLo"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "nodeBytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "nodeResponseMean"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSavedLo"), ("ZXTM-MIB-SMIv2", "interfaceRxBytesLo"), ("ZXTM-MIB-SMIv2", "nodeBytesToNodeHi"), ("ZXTM-MIB-SMIv2", "totalBytesInLo"), ("ZXTM-MIB-SMIv2", "nodePort"), ("ZXTM-MIB-SMIv2", "listenIPBytesInHi"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "interfaceRxBytesHi"), ("ZXTM-MIB-SMIv2", "webCacheHitsHi"), ("ZXTM-MIB-SMIv2", "nodeBytesToNodeLo"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMean"), ("ZXTM-MIB-SMIv2", "nodeState"), ("ZXTM-MIB-SMIv2", "webCacheMissesLo"), ("ZXTM-MIB-SMIv2", "nodeIPAddress"), ("ZXTM-MIB-SMIv2", "interfaceTxBytesLo"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNodeHi"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelTotalNonConf"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "trafficIPNumberRaised"), ("ZXTM-MIB-SMIv2", "nodeResponseMin"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "nodeNewConn"), ("ZXTM-MIB-SMIv2", "poolBytesInLo"), ("ZXTM-MIB-SMIv2", "interfaceTxBytesHi"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNodeHi"), ("ZXTM-MIB-SMIv2", "listenIPBytesOutHi"), ("ZXTM-MIB-SMIv2", "poolBytesOutLo"), ("ZXTM-MIB-SMIv2", "webCacheLookupsLo"), ("ZXTM-MIB-SMIv2", "trafficIPTime"), ("ZXTM-MIB-SMIv2", "totalBytesInHi"), ("ZXTM-MIB-SMIv2", "trafficIPNumber"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNodeLo"), ("ZXTM-MIB-SMIv2", "webCacheHitsLo"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOutHi"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelNodeIPAddr"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSavedHi"), ("ZXTM-MIB-SMIv2", "virtualserverBytesInLo"), ("ZXTM-MIB-SMIv2", "nodeResponseMax"), ("ZXTM-MIB-SMIv2", "nodeTotalConn"), ("ZXTM-MIB-SMIv2", "nodeErrors"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelNodePort"), ("ZXTM-MIB-SMIv2", "virtualserverBytesInHi"), ("ZXTM-MIB-SMIv2", "nodePooledConn"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelTotalConn"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOutLo"), ("ZXTM-MIB-SMIv2", "nodeCurrentRequests"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMin"), ) )
if mibBuilder.loadTexts: obsoleteGroup.setDescription("Deprecated objects")
notificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 4)).setObjects(*(("ZXTM-MIB-SMIv2", "autoscalewrongsizeid"), ("ZXTM-MIB-SMIv2", "locationmonitorok"), ("ZXTM-MIB-SMIv2", "stateunexpected"), ("ZXTM-MIB-SMIv2", "apichangeprocesshanging"), ("ZXTM-MIB-SMIv2", "privkeyok"), ("ZXTM-MIB-SMIv2", "dnszonecreaterecord"), ("ZXTM-MIB-SMIv2", "autonodecreationstarted"), ("ZXTM-MIB-SMIv2", "machinefail"), ("ZXTM-MIB-SMIv2", "sslhwstart"), ("ZXTM-MIB-SMIv2", "routingswfailurelimitreached"), ("ZXTM-MIB-SMIv2", "pooluseunknown"), ("ZXTM-MIB-SMIv2", "invalidemit"), ("ZXTM-MIB-SMIv2", "maxclientbufferdrop"), ("ZXTM-MIB-SMIv2", "pingsendfail"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolerror"), ("ZXTM-MIB-SMIv2", "dropipinfo"), ("ZXTM-MIB-SMIv2", "flipperrecovered"), ("ZXTM-MIB-SMIv2", "confok"), ("ZXTM-MIB-SMIv2", "autoscalestatusupdateerror"), ("ZXTM-MIB-SMIv2", "autoscalewrongname"), ("ZXTM-MIB-SMIv2", "bwlimited"), ("ZXTM-MIB-SMIv2", "flipperraiselocalworking"), ("ZXTM-MIB-SMIv2", "locmovemachine"), ("ZXTM-MIB-SMIv2", "autoscalinghysteresiscantgrow"), ("ZXTM-MIB-SMIv2", "stateconnfail"), ("ZXTM-MIB-SMIv2", "aptimizeuseunknownscope"), ("ZXTM-MIB-SMIv2", "testaction"), ("ZXTM-MIB-SMIv2", "glbserviceok"), ("ZXTM-MIB-SMIv2", "glbnolocations"), ("ZXTM-MIB-SMIv2", "rtspstreamnoports"), ("ZXTM-MIB-SMIv2", "vsstart"), ("ZXTM-MIB-SMIv2", "fewfreefds"), ("ZXTM-MIB-SMIv2", "pingfrontendfail"), ("ZXTM-MIB-SMIv2", "autoscalinglicenseenabled"), ("ZXTM-MIB-SMIv2", "connfail"), ("ZXTM-MIB-SMIv2", "license-timedout-authorized-ts"), ("ZXTM-MIB-SMIv2", "poolactivenodesunknown"), ("ZXTM-MIB-SMIv2", "machinetimeout"), ("ZXTM-MIB-SMIv2", "geodataloadfail"), ("ZXTM-MIB-SMIv2", "rulestreamerrorgetresponse"), ("ZXTM-MIB-SMIv2", "autoscalinghitroof"), ("ZXTM-MIB-SMIv2", "rulesinvalidrequestbody"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolrestarted"), ("ZXTM-MIB-SMIv2", "glbfailalter"), ("ZXTM-MIB-SMIv2", "poolok"), ("ZXTM-MIB-SMIv2", "rulebodycomperror"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotstarted"), ("ZXTM-MIB-SMIv2", "numtipg-exceeded"), ("ZXTM-MIB-SMIv2", "autoscalednodecontested"), ("ZXTM-MIB-SMIv2", "dropipwarn"), ("ZXTM-MIB-SMIv2", "ec2dataretrievalfailed"), ("ZXTM-MIB-SMIv2", "autoscalinghitfloor"), ("ZXTM-MIB-SMIv2", "glbservicedied"), ("ZXTM-MIB-SMIv2", "vssslcerttoexpire"), ("ZXTM-MIB-SMIv2", "slmrecoveredwarn"), ("ZXTM-MIB-SMIv2", "numlocations-exceeded"), ("ZXTM-MIB-SMIv2", "javastarted"), ("ZXTM-MIB-SMIv2", "usingdevlicense"), ("ZXTM-MIB-SMIv2", "ssltpslimited"), ("ZXTM-MIB-SMIv2", "confreptimeout"), ("ZXTM-MIB-SMIv2", "fipsfailops"), ("ZXTM-MIB-SMIv2", "cachesizereduced"), ("ZXTM-MIB-SMIv2", "slmfallenbelowwarn"), ("ZXTM-MIB-SMIv2", "statewritefail"), ("ZXTM-MIB-SMIv2", "connerror"), ("ZXTM-MIB-SMIv2", "clocknotmonotonic"), ("ZXTM-MIB-SMIv2", "zxtmswerror"), ("ZXTM-MIB-SMIv2", "noderesolvemultiple"), ("ZXTM-MIB-SMIv2", "cannotshrinkemptypool"), ("ZXTM-MIB-SMIv2", "serviceruleabort"), ("ZXTM-MIB-SMIv2", "machineok"), ("ZXTM-MIB-SMIv2", "autoscalingprocesstimedout"), ("ZXTM-MIB-SMIv2", "licensetoomanylocations"), ("ZXTM-MIB-SMIv2", "license-rejected-authorized-ts"), ("ZXTM-MIB-SMIv2", "ec2flipperraiselocalworking"), ("ZXTM-MIB-SMIv2", "appfirewallcontroltimeout"), ("ZXTM-MIB-SMIv2", "logdiskoverload"), ("ZXTM-MIB-SMIv2", "poolnonodes"), ("ZXTM-MIB-SMIv2", "activatedautomatically"), ("ZXTM-MIB-SMIv2", "glbnewmaster"), ("ZXTM-MIB-SMIv2", "confdel"), ("ZXTM-MIB-SMIv2", "sslrehandshakemininterval"), ("ZXTM-MIB-SMIv2", "slmfallenbelowserious"), ("ZXTM-MIB-SMIv2", "rulestreamerrortoomuch"), ("ZXTM-MIB-SMIv2", "ec2nosecondaryprivateip"), ("ZXTM-MIB-SMIv2", "rulestreamerrorprocessfailure"), ("ZXTM-MIB-SMIv2", "zclustermoderr"), ("ZXTM-MIB-SMIv2", "sslhwfail"), ("ZXTM-MIB-SMIv2", "locationok"), ("ZXTM-MIB-SMIv2", "nameserveravailable"), ("ZXTM-MIB-SMIv2", "nameserverunavailable"), ("ZXTM-MIB-SMIv2", "rulebufferlarge"), ("ZXTM-MIB-SMIv2", "vsstop"), ("ZXTM-MIB-SMIv2", "ruleabort"), ("ZXTM-MIB-SMIv2", "autoscaleinvalidargfordeletenode"), ("ZXTM-MIB-SMIv2", "dnserroraddzone"), ("ZXTM-MIB-SMIv2", "rulestreamerrorinternal"), ("ZXTM-MIB-SMIv2", "starttlsinvalid"), ("ZXTM-MIB-SMIv2", "nodefail"), ("ZXTM-MIB-SMIv2", "ocspstaplingrevoked"), ("ZXTM-MIB-SMIv2", "locationfail"), ("ZXTM-MIB-SMIv2", "autonodenopublicip"), ("ZXTM-MIB-SMIv2", "dnszoneparse"), ("ZXTM-MIB-SMIv2", "license-timedout-unauthorized"), ("ZXTM-MIB-SMIv2", "triggersummary"), ("ZXTM-MIB-SMIv2", "usedcredsdeleted"), ("ZXTM-MIB-SMIv2", "routingswstartfailed"), ("ZXTM-MIB-SMIv2", "autoscaledpooltoobig"), ("ZXTM-MIB-SMIv2", "flipperraiseremotedropped"), ("ZXTM-MIB-SMIv2", "rulelogmsgwarn"), ("ZXTM-MIB-SMIv2", "numnodes-exceeded"), ("ZXTM-MIB-SMIv2", "flipperraiseosdrop"), ("ZXTM-MIB-SMIv2", "pinggwfail"), ("ZXTM-MIB-SMIv2", "rulelogmsginfo"), ("ZXTM-MIB-SMIv2", "poolpersistencemismatch"), ("ZXTM-MIB-SMIv2", "autoscalingchangeprocessfailure"), ("ZXTM-MIB-SMIv2", "dnszonedelete"), ("ZXTM-MIB-SMIv2", "timemovedback"), ("ZXTM-MIB-SMIv2", "restartrequired"), ("ZXTM-MIB-SMIv2", "dnszonevalidate"), ("ZXTM-MIB-SMIv2", "childcommsfail"), ("ZXTM-MIB-SMIv2", "javastop"), ("ZXTM-MIB-SMIv2", "norate"), ("ZXTM-MIB-SMIv2", "pingbackendfail"), ("ZXTM-MIB-SMIv2", "unlicensed"), ("ZXTM-MIB-SMIv2", "servleterror"), ("ZXTM-MIB-SMIv2", "ec2flipperraiseothersdead"), ("ZXTM-MIB-SMIv2", "ospfneighborsok"), ("ZXTM-MIB-SMIv2", "javadied"), ("ZXTM-MIB-SMIv2", "locationsoapfail"), ("ZXTM-MIB-SMIv2", "autoscalingresuscitatepool"), ("ZXTM-MIB-SMIv2", "aptimizeuseunknownprofile"), ("ZXTM-MIB-SMIv2", "badcontentlen"), ("ZXTM-MIB-SMIv2", "zxtmhighload"), ("ZXTM-MIB-SMIv2", "vslogwritefail"), ("ZXTM-MIB-SMIv2", "autoscaledpoolrefractory"), ("ZXTM-MIB-SMIv2", "license-rejected-unauthorized-ts"), ("ZXTM-MIB-SMIv2", "license-rejected-unauthorized"), ("ZXTM-MIB-SMIv2", "autonodedestroyed"), ("ZXTM-MIB-SMIv2", "dnsaddzone"), ("ZXTM-MIB-SMIv2", "respcompfail"), ("ZXTM-MIB-SMIv2", "license-unauthorized"), ("ZXTM-MIB-SMIv2", "ec2iperr"), ("ZXTM-MIB-SMIv2", "sipstreamnoports"), ("ZXTM-MIB-SMIv2", "pooldied"), ("ZXTM-MIB-SMIv2", "javastartfail"), ("ZXTM-MIB-SMIv2", "machinerecovered"), ("ZXTM-MIB-SMIv2", "autonodestatuschange"), ("ZXTM-MIB-SMIv2", "autoscaleresolvefailure"), ("ZXTM-MIB-SMIv2", "customevent"), ("ZXTM-MIB-SMIv2", "licensecorrupt"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolstopped"), ("ZXTM-MIB-SMIv2", "sslhandshakemsgsizelimit"), ("ZXTM-MIB-SMIv2", "datalocalstorefull"), ("ZXTM-MIB-SMIv2", "license-graceperiodexpired"), ("ZXTM-MIB-SMIv2", "flipperbackendsworking"), ("ZXTM-MIB-SMIv2", "servicerulelocnotconfigured"), ("ZXTM-MIB-SMIv2", "autherror"), ("ZXTM-MIB-SMIv2", "javaterminatefail"), ("ZXTM-MIB-SMIv2", "expired"), ("ZXTM-MIB-SMIv2", "autoscalinglicenseerror"), ("ZXTM-MIB-SMIv2", "servicerulelocdead"), ("ZXTM-MIB-SMIv2", "license-authorized-ts"), ("ZXTM-MIB-SMIv2", "nostarttls"), ("ZXTM-MIB-SMIv2", "autonodedestructioncomplete"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotenough"), ("ZXTM-MIB-SMIv2", "confadd"), ("ZXTM-MIB-SMIv2", "flipperfrontendsworking"), ("ZXTM-MIB-SMIv2", "statereadfail"), ("ZXTM-MIB-SMIv2", "glbtoomanylocations"), ("ZXTM-MIB-SMIv2", "statetimeout"), ("ZXTM-MIB-SMIv2", "dropec2ipwarn"), ("ZXTM-MIB-SMIv2", "autoscalinglicensedisabled"), ("ZXTM-MIB-SMIv2", "noderesolvefailure"), ("ZXTM-MIB-SMIv2", "expiresoon"), ("ZXTM-MIB-SMIv2", "vscacertexpired"), ("ZXTM-MIB-SMIv2", "license-graceperiodexpired-ts"), ("ZXTM-MIB-SMIv2", "license-authorized"), ("ZXTM-MIB-SMIv2", "license-timedout-authorized"), ("ZXTM-MIB-SMIv2", "numpools-exceeded"), ("ZXTM-MIB-SMIv2", "sslcrltoobig"), ("ZXTM-MIB-SMIv2", "flipperraiseothersdead"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolstarted"), ("ZXTM-MIB-SMIv2", "confrepfailed"), ("ZXTM-MIB-SMIv2", "ssldrop"), ("ZXTM-MIB-SMIv2", "versionmismatch"), ("ZXTM-MIB-SMIv2", "tpslimited"), ("ZXTM-MIB-SMIv2", "servicerulelocunknown"), ("ZXTM-MIB-SMIv2", "rulexmlerr"), ("ZXTM-MIB-SMIv2", "autoscaledpooltoosmall"), ("ZXTM-MIB-SMIv2", "licenseclustertoobig"), ("ZXTM-MIB-SMIv2", "appliance"), ("ZXTM-MIB-SMIv2", "vscacerttoexpire"), ("ZXTM-MIB-SMIv2", "ocspstaplingunrevoked"), ("ZXTM-MIB-SMIv2", "autonoderemoved"), ("ZXTM-MIB-SMIv2", "ocspstaplingnomem"), ("ZXTM-MIB-SMIv2", "stateok"), ("ZXTM-MIB-SMIv2", "glbdeadlocmissingips"), ("ZXTM-MIB-SMIv2", "autoscalewrongimageid"), ("ZXTM-MIB-SMIv2", "vssslcertexpired"), ("ZXTM-MIB-SMIv2", "autoscaleinvalidargforcreatenode"), ("ZXTM-MIB-SMIv2", "monitorfail"), ("ZXTM-MIB-SMIv2", "license-rejected-authorized"), ("ZXTM-MIB-SMIv2", "ocspstaplingfail"), ("ZXTM-MIB-SMIv2", "ruleoverrun"), ("ZXTM-MIB-SMIv2", "apistatusprocesshanging"), ("ZXTM-MIB-SMIv2", "autoscaleresponseparseerror"), ("ZXTM-MIB-SMIv2", "vscrloutofdate"), ("ZXTM-MIB-SMIv2", "javanotfound"), ("ZXTM-MIB-SMIv2", "sslhwrestart"), ("ZXTM-MIB-SMIv2", "autoscalingpoolstatechange"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotfinished"), ("ZXTM-MIB-SMIv2", "multihostload"), ("ZXTM-MIB-SMIv2", "autonodedisappeared"), ("ZXTM-MIB-SMIv2", "allmachinesok"), ("ZXTM-MIB-SMIv2", "glblogwritefail"), ("ZXTM-MIB-SMIv2", "ec2dataretrievalsuccessful"), ("ZXTM-MIB-SMIv2", "datastorefull"), ("ZXTM-MIB-SMIv2", "logfiledeleted"), ("ZXTM-MIB-SMIv2", "locationsoapok"), ("ZXTM-MIB-SMIv2", "ospfneighborsfailed"), ("ZXTM-MIB-SMIv2", "rulelogmsgserious"), ("ZXTM-MIB-SMIv2", "rulenopersistence"), ("ZXTM-MIB-SMIv2", "locationmonitorfail"), ("ZXTM-MIB-SMIv2", "forwardproxybadhost"), ("ZXTM-MIB-SMIv2", "usinglicense"), ("ZXTM-MIB-SMIv2", "ospfneighborsdegraded"), ("ZXTM-MIB-SMIv2", "monitorok"), ("ZXTM-MIB-SMIv2", "lessmemallowed"), ("ZXTM-MIB-SMIv2", "aptimizedisabled"), ("ZXTM-MIB-SMIv2", "glbmissingips"), ("ZXTM-MIB-SMIv2", "ec2nopublicip"), ("ZXTM-MIB-SMIv2", "autoscalingdisabled"), ("ZXTM-MIB-SMIv2", "ocspstaplingunknown"), ("ZXTM-MIB-SMIv2", "autonodecreationcomplete"), ("ZXTM-MIB-SMIv2", "slmclasslimitexceeded"), ("ZXTM-MIB-SMIv2", "autoscalepoolconfupdate"), ("ZXTM-MIB-SMIv2", "fipsfailinit"), ("ZXTM-MIB-SMIv2", "flipperdadreraise"), ("ZXTM-MIB-SMIv2", "running"), ("ZXTM-MIB-SMIv2", "license-timedout-unauthorized-ts"), ("ZXTM-MIB-SMIv2", "analyticslicenseenabled"), ("ZXTM-MIB-SMIv2", "confmod"), ("ZXTM-MIB-SMIv2", "statebaddata"), ("ZXTM-MIB-SMIv2", "logdiskfull"), ("ZXTM-MIB-SMIv2", "license-explicitlydisabled-ts"), ("ZXTM-MIB-SMIv2", "routingswfailed"), ("ZXTM-MIB-SMIv2", "sslfail"), ("ZXTM-MIB-SMIv2", "flipperipexists"), ("ZXTM-MIB-SMIv2", "routingswoperational"), ("ZXTM-MIB-SMIv2", "dnserrordeletezone"), ("ZXTM-MIB-SMIv2", "clockjump"), ("ZXTM-MIB-SMIv2", "morememallowed"), ("ZXTM-MIB-SMIv2", "ehloinvalid"), ("ZXTM-MIB-SMIv2", "autoscalinghysteresiscantshrink"), ("ZXTM-MIB-SMIv2", "analyticslicensedisabled"), ("ZXTM-MIB-SMIv2", "responsetoolarge"), ("ZXTM-MIB-SMIv2", "nodeworking"), ("ZXTM-MIB-SMIv2", "autonodeexisted"), ("ZXTM-MIB-SMIv2", "locempty"), ("ZXTM-MIB-SMIv2", "activatealldead"), ("ZXTM-MIB-SMIv2", "slmrecoveredserious"), ) )
if mibBuilder.loadTexts: notificationGroup.setDescription("Notification group")
obsoleteNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 5)).setObjects(*(("ZXTM-MIB-SMIv2", "rebootrequired"), ("ZXTM-MIB-SMIv2", "ec2vpceipassocerr"), ("ZXTM-MIB-SMIv2", "ec2vpciderr"), ("ZXTM-MIB-SMIv2", "dnszoneparsechild"), ) )
if mibBuilder.loadTexts: obsoleteNotificationGroup.setDescription("Obsolete notification group")
deprecatedNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 6)).setObjects(*(("ZXTM-MIB-SMIv2", "hardware"), ("ZXTM-MIB-SMIv2", "childkilled"), ("ZXTM-MIB-SMIv2", "childhung"), ) )
if mibBuilder.loadTexts: deprecatedNotificationGroup.setDescription("Deprecated notification group")

# Compliances

compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 1)).setObjects(*(("ZXTM-MIB-SMIv2", "notificationGroup"), ("ZXTM-MIB-SMIv2", "mainGroup"), ) )
if mibBuilder.loadTexts: compliance.setDescription("Compliance statement")
deprecatedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 2)).setObjects(*(("ZXTM-MIB-SMIv2", "deprecatedNotificationGroup"), ("ZXTM-MIB-SMIv2", "deprecatedGroup"), ) )
if mibBuilder.loadTexts: deprecatedCompliance.setDescription("Compliance statement")
obsoleteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 3)).setObjects(*(("ZXTM-MIB-SMIv2", "obsoleteNotificationGroup"), ("ZXTM-MIB-SMIv2", "obsoleteGroup"), ) )
if mibBuilder.loadTexts: obsoleteCompliance.setDescription("Compliance statement")

# Exports

# Module identity
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", PYSNMP_MODULE_ID=zxtm)

# Objects
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", zeus=zeus, products=products, zxtm=zxtm, globals=globals, version=version, numberChildProcesses=numberChildProcesses, upTime=upTime, timeLastConfigUpdate=timeLastConfigUpdate, totalBytesInLo=totalBytesInLo, totalBytesInHi=totalBytesInHi, totalBytesOutLo=totalBytesOutLo, totalBytesOutHi=totalBytesOutHi, totalCurrentConn=totalCurrentConn, totalConn=totalConn, numberDNSARequests=numberDNSARequests, numberDNSACacheHits=numberDNSACacheHits, numberDNSPTRRequests=numberDNSPTRRequests, numberDNSPTRCacheHits=numberDNSPTRCacheHits, numberSNMPUnauthorisedRequests=numberSNMPUnauthorisedRequests, numberSNMPBadRequests=numberSNMPBadRequests, numberSNMPGetRequests=numberSNMPGetRequests, numberSNMPGetNextRequests=numberSNMPGetNextRequests, sslCipherEncrypts=sslCipherEncrypts, sslCipherDecrypts=sslCipherDecrypts, sslCipherRC4Encrypts=sslCipherRC4Encrypts, sslCipherRC4Decrypts=sslCipherRC4Decrypts, sslCipherDESEncrypts=sslCipherDESEncrypts, sslCipherDESDecrypts=sslCipherDESDecrypts, sslCipher3DESEncrypts=sslCipher3DESEncrypts, sslCipher3DESDecrypts=sslCipher3DESDecrypts, sslCipherAESEncrypts=sslCipherAESEncrypts, sslCipherAESDecrypts=sslCipherAESDecrypts, sslCipherRSAEncrypts=sslCipherRSAEncrypts, sslCipherRSADecrypts=sslCipherRSADecrypts, sslCipherRSADecryptsExternal=sslCipherRSADecryptsExternal, sslHandshakeSSLv2=sslHandshakeSSLv2, sslHandshakeSSLv3=sslHandshakeSSLv3, sslHandshakeTLSv1=sslHandshakeTLSv1, sslClientCertNotSent=sslClientCertNotSent, sslClientCertInvalid=sslClientCertInvalid, sslClientCertExpired=sslClientCertExpired, sslClientCertRevoked=sslClientCertRevoked, sslSessionIDMemCacheHit=sslSessionIDMemCacheHit, sslSessionIDMemCacheMiss=sslSessionIDMemCacheMiss, sslSessionIDDiskCacheHit=sslSessionIDDiskCacheHit, sslSessionIDDiskCacheMiss=sslSessionIDDiskCacheMiss, sslHandshakeTLSv11=sslHandshakeTLSv11, sslConnections=sslConnections, sysCPUIdlePercent=sysCPUIdlePercent, sysCPUBusyPercent=sysCPUBusyPercent, sysCPUUserBusyPercent=sysCPUUserBusyPercent, sysCPUSystemBusyPercent=sysCPUSystemBusyPercent, sysFDsFree=sysFDsFree, sysMemTotal=sysMemTotal, sysMemFree=sysMemFree, sysMemInUse=sysMemInUse, sysMemBuffered=sysMemBuffered, sysMemSwapped=sysMemSwapped, sysMemSwapTotal=sysMemSwapTotal, numIdleConnections=numIdleConnections, sslCipherRSAEncryptsExternal=sslCipherRSAEncryptsExternal, dataEntries=dataEntries, dataMemoryUsage=dataMemoryUsage, eventsSeen=eventsSeen, totalDNSResponses=totalDNSResponses, totalBadDNSPackets=totalBadDNSPackets, totalBackendServerErrors=totalBackendServerErrors, totalBytesIn=totalBytesIn, totalBytesOut=totalBytesOut, numberSNMPGetBulkRequests=numberSNMPGetBulkRequests, sslCipherDSASigns=sslCipherDSASigns, sslCipherDSAVerifies=sslCipherDSAVerifies, sslHandshakeTLSv12=sslHandshakeTLSv12, sslCipherDHGenerates=sslCipherDHGenerates, sslCipherDHAgreements=sslCipherDHAgreements, sslCipherAESGCMEncrypts=sslCipherAESGCMEncrypts, sslCipherAESGCMDecrypts=sslCipherAESGCMDecrypts, totalRequests=totalRequests, totalTransactions=totalTransactions, hourlyPeakBytesInPerSecond=hourlyPeakBytesInPerSecond, hourlyPeakBytesOutPerSecond=hourlyPeakBytesOutPerSecond, hourlyPeakRequestsPerSecond=hourlyPeakRequestsPerSecond, hourlyPeakSSLConnectionsPerSecond=hourlyPeakSSLConnectionsPerSecond, virtualservers=virtualservers, virtualserverNumber=virtualserverNumber, virtualserverTable=virtualserverTable, virtualserverEntry=virtualserverEntry, virtualserverName=virtualserverName, virtualserverPort=virtualserverPort, virtualserverProtocol=virtualserverProtocol, virtualserverDefaultTrafficPool=virtualserverDefaultTrafficPool, virtualserverBytesInLo=virtualserverBytesInLo, virtualserverBytesInHi=virtualserverBytesInHi, virtualserverBytesOutLo=virtualserverBytesOutLo, virtualserverBytesOutHi=virtualserverBytesOutHi, virtualserverCurrentConn=virtualserverCurrentConn, virtualserverMaxConn=virtualserverMaxConn, virtualserverTotalConn=virtualserverTotalConn, virtualserverDiscard=virtualserverDiscard, virtualserverDirectReplies=virtualserverDirectReplies, virtualserverConnectTimedOut=virtualserverConnectTimedOut, virtualserverDataTimedOut=virtualserverDataTimedOut, virtualserverKeepaliveTimedOut=virtualserverKeepaliveTimedOut, virtualserverUdpTimedOut=virtualserverUdpTimedOut, virtualserverTotalDgram=virtualserverTotalDgram, virtualserverGzip=virtualserverGzip, virtualserverGzipBytesSavedLo=virtualserverGzipBytesSavedLo, virtualserverGzipBytesSavedHi=virtualserverGzipBytesSavedHi, virtualserverHttpRewriteLocation=virtualserverHttpRewriteLocation, virtualserverHttpRewriteCookie=virtualserverHttpRewriteCookie, virtualserverHttpCacheHits=virtualserverHttpCacheHits, virtualserverHttpCacheLookups=virtualserverHttpCacheLookups, virtualserverHttpCacheHitRate=virtualserverHttpCacheHitRate, virtualserverSIPTotalCalls=virtualserverSIPTotalCalls, virtualserverSIPRejectedRequests=virtualserverSIPRejectedRequests, virtualserverConnectionErrors=virtualserverConnectionErrors, virtualserverConnectionFailures=virtualserverConnectionFailures, virtualserverBytesIn=virtualserverBytesIn, virtualserverBytesOut=virtualserverBytesOut, virtualserverGzipBytesSaved=virtualserverGzipBytesSaved, virtualserverCertStatusRequests=virtualserverCertStatusRequests, virtualserverCertStatusResponses=virtualserverCertStatusResponses, virtualserverMaxDurationTimedOut=virtualserverMaxDurationTimedOut, virtualserverProcessingTimedOut=virtualserverProcessingTimedOut, pools=pools, poolNumber=poolNumber)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", poolTable=poolTable, poolEntry=poolEntry, poolName=poolName, poolAlgorithm=poolAlgorithm, poolNodes=poolNodes, poolDraining=poolDraining, poolFailPool=poolFailPool, poolBytesInLo=poolBytesInLo, poolBytesInHi=poolBytesInHi, poolBytesOutLo=poolBytesOutLo, poolBytesOutHi=poolBytesOutHi, poolTotalConn=poolTotalConn, poolPersistence=poolPersistence, poolSessionMigrated=poolSessionMigrated, poolDisabled=poolDisabled, poolState=poolState, poolConnsQueued=poolConnsQueued, poolQueueTimeouts=poolQueueTimeouts, poolMinQueueTime=poolMinQueueTime, poolMaxQueueTime=poolMaxQueueTime, poolMeanQueueTime=poolMeanQueueTime, poolBytesIn=poolBytesIn, poolBytesOut=poolBytesOut, nodes=nodes, nodeNumber=nodeNumber, nodeTable=nodeTable, nodeEntry=nodeEntry, nodeIPAddress=nodeIPAddress, nodePort=nodePort, nodeHostName=nodeHostName, nodeState=nodeState, nodeBytesToNodeLo=nodeBytesToNodeLo, nodeBytesToNodeHi=nodeBytesToNodeHi, nodeBytesFromNodeLo=nodeBytesFromNodeLo, nodeBytesFromNodeHi=nodeBytesFromNodeHi, nodeCurrentRequests=nodeCurrentRequests, nodeTotalConn=nodeTotalConn, nodePooledConn=nodePooledConn, nodeFailures=nodeFailures, nodeNewConn=nodeNewConn, nodeErrors=nodeErrors, nodeResponseMin=nodeResponseMin, nodeResponseMax=nodeResponseMax, nodeResponseMean=nodeResponseMean, nodeCurrentConn=nodeCurrentConn, nodeNumberInet46=nodeNumberInet46, nodeInet46Table=nodeInet46Table, nodeInet46Entry=nodeInet46Entry, nodeInet46AddressType=nodeInet46AddressType, nodeInet46Address=nodeInet46Address, nodeInet46Port=nodeInet46Port, nodeInet46HostName=nodeInet46HostName, nodeInet46State=nodeInet46State, nodeInet46BytesToNodeLo=nodeInet46BytesToNodeLo, nodeInet46BytesToNodeHi=nodeInet46BytesToNodeHi, nodeInet46BytesFromNodeLo=nodeInet46BytesFromNodeLo, nodeInet46BytesFromNodeHi=nodeInet46BytesFromNodeHi, nodeInet46CurrentRequests=nodeInet46CurrentRequests, nodeInet46TotalConn=nodeInet46TotalConn, nodeInet46PooledConn=nodeInet46PooledConn, nodeInet46Failures=nodeInet46Failures, nodeInet46NewConn=nodeInet46NewConn, nodeInet46Errors=nodeInet46Errors, nodeInet46ResponseMin=nodeInet46ResponseMin, nodeInet46ResponseMax=nodeInet46ResponseMax, nodeInet46ResponseMean=nodeInet46ResponseMean, nodeInet46IdleConns=nodeInet46IdleConns, nodeInet46CurrentConn=nodeInet46CurrentConn, nodeInet46BytesToNode=nodeInet46BytesToNode, nodeInet46BytesFromNode=nodeInet46BytesFromNode, perPoolNodeNumber=perPoolNodeNumber, perPoolNodeTable=perPoolNodeTable, perPoolNodeEntry=perPoolNodeEntry, perPoolNodePoolName=perPoolNodePoolName, perPoolNodeNodeAddressType=perPoolNodeNodeAddressType, perPoolNodeNodeAddress=perPoolNodeNodeAddress, perPoolNodeNodePort=perPoolNodeNodePort, perPoolNodeNodeHostName=perPoolNodeNodeHostName, perPoolNodeState=perPoolNodeState, perPoolNodeBytesToNodeLo=perPoolNodeBytesToNodeLo, perPoolNodeBytesToNodeHi=perPoolNodeBytesToNodeHi, perPoolNodeBytesFromNodeLo=perPoolNodeBytesFromNodeLo, perPoolNodeBytesFromNodeHi=perPoolNodeBytesFromNodeHi, perPoolNodeCurrentRequests=perPoolNodeCurrentRequests, perPoolNodeTotalConn=perPoolNodeTotalConn, perPoolNodePooledConn=perPoolNodePooledConn, perPoolNodeFailures=perPoolNodeFailures, perPoolNodeNewConn=perPoolNodeNewConn, perPoolNodeErrors=perPoolNodeErrors, perPoolNodeResponseMin=perPoolNodeResponseMin, perPoolNodeResponseMax=perPoolNodeResponseMax, perPoolNodeResponseMean=perPoolNodeResponseMean, perPoolNodeIdleConns=perPoolNodeIdleConns, perPoolNodeCurrentConn=perPoolNodeCurrentConn, perPoolNodeBytesToNode=perPoolNodeBytesToNode, perPoolNodeBytesFromNode=perPoolNodeBytesFromNode, serviceprotection=serviceprotection, serviceProtNumber=serviceProtNumber, serviceProtTable=serviceProtTable, serviceProtEntry=serviceProtEntry, serviceProtName=serviceProtName, serviceProtTotalRefusal=serviceProtTotalRefusal, serviceProtLastRefusalTime=serviceProtLastRefusalTime, serviceProtRefusalIP=serviceProtRefusalIP, serviceProtRefusalConc1IP=serviceProtRefusalConc1IP, serviceProtRefusalConc10IP=serviceProtRefusalConc10IP, serviceProtRefusalConnRate=serviceProtRefusalConnRate, serviceProtRefusalRFC2396=serviceProtRefusalRFC2396, serviceProtRefusalSize=serviceProtRefusalSize, serviceProtRefusalBinary=serviceProtRefusalBinary, trafficips=trafficips, trafficIPNumber=trafficIPNumber, trafficIPNumberRaised=trafficIPNumberRaised, trafficIPTable=trafficIPTable, trafficIPEntry=trafficIPEntry, trafficIPAddress=trafficIPAddress, trafficIPState=trafficIPState, trafficIPTime=trafficIPTime, trafficIPGatewayPingRequests=trafficIPGatewayPingRequests, trafficIPGatewayPingResponses=trafficIPGatewayPingResponses, trafficIPNodePingRequests=trafficIPNodePingRequests, trafficIPNodePingResponses=trafficIPNodePingResponses, trafficIPPingResponseErrors=trafficIPPingResponseErrors, trafficIPARPMessage=trafficIPARPMessage, trafficIPNumberInet46=trafficIPNumberInet46, trafficIPNumberRaisedInet46=trafficIPNumberRaisedInet46, trafficIPInet46Table=trafficIPInet46Table)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", trafficIPInet46Entry=trafficIPInet46Entry, trafficIPInet46AddressType=trafficIPInet46AddressType, trafficIPInet46Address=trafficIPInet46Address, trafficIPInet46State=trafficIPInet46State, trafficIPInet46Time=trafficIPInet46Time, servicelevelmonitoring=servicelevelmonitoring, serviceLevelNumber=serviceLevelNumber, serviceLevelTable=serviceLevelTable, serviceLevelEntry=serviceLevelEntry, serviceLevelName=serviceLevelName, serviceLevelTotalConn=serviceLevelTotalConn, serviceLevelTotalNonConf=serviceLevelTotalNonConf, serviceLevelResponseMin=serviceLevelResponseMin, serviceLevelResponseMax=serviceLevelResponseMax, serviceLevelResponseMean=serviceLevelResponseMean, serviceLevelIsOK=serviceLevelIsOK, serviceLevelConforming=serviceLevelConforming, serviceLevelCurrentConns=serviceLevelCurrentConns, pernodeservicelevelmon=pernodeservicelevelmon, perNodeServiceLevelTable=perNodeServiceLevelTable, perNodeServiceLevelEntry=perNodeServiceLevelEntry, perNodeServiceLevelSLMName=perNodeServiceLevelSLMName, perNodeServiceLevelNodeIPAddr=perNodeServiceLevelNodeIPAddr, perNodeServiceLevelNodePort=perNodeServiceLevelNodePort, perNodeServiceLevelTotalConn=perNodeServiceLevelTotalConn, perNodeServiceLevelTotalNonConf=perNodeServiceLevelTotalNonConf, perNodeServiceLevelResponseMin=perNodeServiceLevelResponseMin, perNodeServiceLevelResponseMax=perNodeServiceLevelResponseMax, perNodeServiceLevelResponseMean=perNodeServiceLevelResponseMean, perNodeServiceLevelInet46Table=perNodeServiceLevelInet46Table, perNodeServiceLevelInet46Entry=perNodeServiceLevelInet46Entry, perNodeServiceLevelInet46SLMName=perNodeServiceLevelInet46SLMName, perNodeServiceLevelInet46NodeAddressType=perNodeServiceLevelInet46NodeAddressType, perNodeServiceLevelInet46NodeAddress=perNodeServiceLevelInet46NodeAddress, perNodeServiceLevelInet46NodePort=perNodeServiceLevelInet46NodePort, perNodeServiceLevelInet46TotalConn=perNodeServiceLevelInet46TotalConn, perNodeServiceLevelInet46TotalNonConf=perNodeServiceLevelInet46TotalNonConf, perNodeServiceLevelInet46ResponseMin=perNodeServiceLevelInet46ResponseMin, perNodeServiceLevelInet46ResponseMax=perNodeServiceLevelInet46ResponseMax, perNodeServiceLevelInet46ResponseMean=perNodeServiceLevelInet46ResponseMean, bandwidthmgt=bandwidthmgt, bandwidthClassNumber=bandwidthClassNumber, bandwidthClassTable=bandwidthClassTable, bandwidthClassEntry=bandwidthClassEntry, bandwidthClassName=bandwidthClassName, bandwidthClassMaximum=bandwidthClassMaximum, bandwidthClassGuarantee=bandwidthClassGuarantee, bandwidthClassBytesOutLo=bandwidthClassBytesOutLo, bandwidthClassBytesOutHi=bandwidthClassBytesOutHi, bandwidthClassBytesOut=bandwidthClassBytesOut, connratelimit=connratelimit, rateClassNumber=rateClassNumber, rateClassTable=rateClassTable, rateClassEntry=rateClassEntry, rateClassName=rateClassName, rateClassMaxRatePerMin=rateClassMaxRatePerMin, rateClassMaxRatePerSec=rateClassMaxRatePerSec, rateClassQueueLength=rateClassQueueLength, rateClassCurrentRate=rateClassCurrentRate, rateClassDropped=rateClassDropped, rateClassConnsEntered=rateClassConnsEntered, rateClassConnsLeft=rateClassConnsLeft, extra=extra, userCounterNumber=userCounterNumber, userCounterTable=userCounterTable, userCounterEntry=userCounterEntry, userCounterName=userCounterName, userCounterValue=userCounterValue, userCounter64Table=userCounter64Table, userCounter64Entry=userCounter64Entry, userCounter64Name=userCounter64Name, userCounter64Value=userCounter64Value, netinterfaces=netinterfaces, interfaceNumber=interfaceNumber, interfaceTable=interfaceTable, interfaceEntry=interfaceEntry, interfaceName=interfaceName, interfaceRxPackets=interfaceRxPackets, interfaceTxPackets=interfaceTxPackets, interfaceRxErrors=interfaceRxErrors, interfaceTxErrors=interfaceTxErrors, interfaceCollisions=interfaceCollisions, interfaceRxBytesLo=interfaceRxBytesLo, interfaceRxBytesHi=interfaceRxBytesHi, interfaceTxBytesLo=interfaceTxBytesLo, interfaceTxBytesHi=interfaceTxBytesHi, interfaceRxBytes=interfaceRxBytes, interfaceTxBytes=interfaceTxBytes, events=events, eventNumber=eventNumber, eventTable=eventTable, eventEntry=eventEntry, eventName=eventName, eventsMatched=eventsMatched, actions=actions, actionNumber=actionNumber, actionTable=actionTable, actionEntry=actionEntry, actionName=actionName, actionsProcessed=actionsProcessed, zxtmtraps=zxtmtraps, trapsZero=trapsZero, persistence=persistence, cache=cache, webcache=webcache, webCacheHitsLo=webCacheHitsLo, webCacheHitsHi=webCacheHitsHi, webCacheMissesLo=webCacheMissesLo, webCacheMissesHi=webCacheMissesHi, webCacheLookupsLo=webCacheLookupsLo, webCacheLookupsHi=webCacheLookupsHi, webCacheMemUsed=webCacheMemUsed, webCacheMemMaximum=webCacheMemMaximum, webCacheHitRate=webCacheHitRate, webCacheEntries=webCacheEntries, webCacheMaxEntries=webCacheMaxEntries, webCacheOldest=webCacheOldest, webCacheHits=webCacheHits, webCacheMisses=webCacheMisses, webCacheLookups=webCacheLookups, sslcache=sslcache, sslCacheHits=sslCacheHits, sslCacheMisses=sslCacheMisses, sslCacheLookups=sslCacheLookups, sslCacheHitRate=sslCacheHitRate, sslCacheEntries=sslCacheEntries, sslCacheEntriesMax=sslCacheEntriesMax)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", sslCacheOldest=sslCacheOldest, aspsessioncache=aspsessioncache, aspSessionCacheHits=aspSessionCacheHits, aspSessionCacheMisses=aspSessionCacheMisses, aspSessionCacheLookups=aspSessionCacheLookups, aspSessionCacheHitRate=aspSessionCacheHitRate, aspSessionCacheEntries=aspSessionCacheEntries, aspSessionCacheEntriesMax=aspSessionCacheEntriesMax, aspSessionCacheOldest=aspSessionCacheOldest, ipsessioncache=ipsessioncache, ipSessionCacheHits=ipSessionCacheHits, ipSessionCacheMisses=ipSessionCacheMisses, ipSessionCacheLookups=ipSessionCacheLookups, ipSessionCacheHitRate=ipSessionCacheHitRate, ipSessionCacheEntries=ipSessionCacheEntries, ipSessionCacheEntriesMax=ipSessionCacheEntriesMax, ipSessionCacheOldest=ipSessionCacheOldest, j2eesessioncache=j2eesessioncache, j2eeSessionCacheHits=j2eeSessionCacheHits, j2eeSessionCacheMisses=j2eeSessionCacheMisses, j2eeSessionCacheLookups=j2eeSessionCacheLookups, j2eeSessionCacheHitRate=j2eeSessionCacheHitRate, j2eeSessionCacheEntries=j2eeSessionCacheEntries, j2eeSessionCacheEntriesMax=j2eeSessionCacheEntriesMax, j2eeSessionCacheOldest=j2eeSessionCacheOldest, unisessioncache=unisessioncache, uniSessionCacheHits=uniSessionCacheHits, uniSessionCacheMisses=uniSessionCacheMisses, uniSessionCacheLookups=uniSessionCacheLookups, uniSessionCacheHitRate=uniSessionCacheHitRate, uniSessionCacheEntries=uniSessionCacheEntries, uniSessionCacheEntriesMax=uniSessionCacheEntriesMax, uniSessionCacheOldest=uniSessionCacheOldest, sslsessioncache=sslsessioncache, sslSessionCacheHits=sslSessionCacheHits, sslSessionCacheMisses=sslSessionCacheMisses, sslSessionCacheLookups=sslSessionCacheLookups, sslSessionCacheHitRate=sslSessionCacheHitRate, sslSessionCacheEntries=sslSessionCacheEntries, sslSessionCacheEntriesMax=sslSessionCacheEntriesMax, sslSessionCacheOldest=sslSessionCacheOldest, rules=rules, ruleNumber=ruleNumber, ruleTable=ruleTable, ruleEntry=ruleEntry, ruleName=ruleName, ruleExecutions=ruleExecutions, ruleAborts=ruleAborts, ruleResponds=ruleResponds, rulePoolSelect=rulePoolSelect, ruleRetries=ruleRetries, ruleDiscards=ruleDiscards, ruleExecutionTimeWarnings=ruleExecutionTimeWarnings, monitors=monitors, monitorNumber=monitorNumber, monitorTable=monitorTable, monitorEntry=monitorEntry, monitorName=monitorName, licensekeys=licensekeys, licensekeyNumber=licensekeyNumber, licensekeyTable=licensekeyTable, licensekeyEntry=licensekeyEntry, licensekeyName=licensekeyName, zxtms=zxtms, zxtmNumber=zxtmNumber, zxtmTable=zxtmTable, zxtmEntry=zxtmEntry, zxtmName=zxtmName, trapobjects=trapobjects, fullLogLine=fullLogLine, confName=confName, customEventName=customEventName, domainName=domainName, cloudcredentials=cloudcredentials, cloudcredentialsClassNumber=cloudcredentialsClassNumber, cloudcredentialsTable=cloudcredentialsTable, cloudcredentialsEntry=cloudcredentialsEntry, cloudcredentialsName=cloudcredentialsName, cloudcredentialsStatusRequests=cloudcredentialsStatusRequests, cloudcredentialsNodeCreations=cloudcredentialsNodeCreations, cloudcredentialsNodeDeletions=cloudcredentialsNodeDeletions, glbservices=glbservices, glbServiceNumber=glbServiceNumber, glbServiceTable=glbServiceTable, glbServiceEntry=glbServiceEntry, glbServiceName=glbServiceName, glbServiceResponses=glbServiceResponses, glbServiceUnmodified=glbServiceUnmodified, glbServiceDiscarded=glbServiceDiscarded, perlocationservices=perlocationservices, perLocationServiceTable=perLocationServiceTable, perLocationServiceEntry=perLocationServiceEntry, perLocationServiceLocationName=perLocationServiceLocationName, perLocationServiceLocationCode=perLocationServiceLocationCode, perLocationServiceName=perLocationServiceName, perLocationServiceDraining=perLocationServiceDraining, perLocationServiceState=perLocationServiceState, perLocationServiceFrontendState=perLocationServiceFrontendState, perLocationServiceMonitorState=perLocationServiceMonitorState, perLocationServiceLoad=perLocationServiceLoad, perLocationServiceResponses=perLocationServiceResponses, locations=locations, locationTable=locationTable, locationEntry=locationEntry, locationName=locationName, locationCode=locationCode, locationLoad=locationLoad, locationResponses=locationResponses, listenips=listenips, listenIPTable=listenIPTable, listenIPEntry=listenIPEntry, listenIPAddressType=listenIPAddressType, listenIPAddress=listenIPAddress, listenIPBytesInLo=listenIPBytesInLo, listenIPBytesInHi=listenIPBytesInHi, listenIPBytesOutLo=listenIPBytesOutLo, listenIPBytesOutHi=listenIPBytesOutHi, listenIPCurrentConn=listenIPCurrentConn, listenIPTotalConn=listenIPTotalConn, listenIPMaxConn=listenIPMaxConn, listenIPBytesIn=listenIPBytesIn, listenIPBytesOut=listenIPBytesOut, authenticators=authenticators, authenticatorNumber=authenticatorNumber, authenticatorTable=authenticatorTable, authenticatorEntry=authenticatorEntry, authenticatorName=authenticatorName)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", authenticatorRequests=authenticatorRequests, authenticatorPasses=authenticatorPasses, authenticatorFails=authenticatorFails, authenticatorErrors=authenticatorErrors, conformanceGroups=conformanceGroups, complianceStatements=complianceStatements, steelheads=steelheads, steelheadNumber=steelheadNumber, steelheadTable=steelheadTable, steelheadEntry=steelheadEntry, steelheadName=steelheadName, steelheadOptimized=steelheadOptimized, sslocspstapling=sslocspstapling, sslOcspStaplingCacheCount=sslOcspStaplingCacheCount, sslOcspStaplingCount=sslOcspStaplingCount, sslOcspStaplingSuccessCount=sslOcspStaplingSuccessCount, sslOcspStaplingFailureCount=sslOcspStaplingFailureCount, sslOcspStaplingGoodCount=sslOcspStaplingGoodCount, sslOcspStaplingRevokedCount=sslOcspStaplingRevokedCount, sslOcspStaplingUnknownCount=sslOcspStaplingUnknownCount)

# Notifications
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", testaction=testaction, running=running, fewfreefds=fewfreefds, restartrequired=restartrequired, timemovedback=timemovedback, sslfail=sslfail, hardware=hardware, zxtmswerror=zxtmswerror, customevent=customevent, versionmismatch=versionmismatch, machineok=machineok, machinetimeout=machinetimeout, machinefail=machinefail, allmachinesok=allmachinesok, flipperbackendsworking=flipperbackendsworking, flipperfrontendsworking=flipperfrontendsworking, pingbackendfail=pingbackendfail, pingfrontendfail=pingfrontendfail, pinggwfail=pinggwfail, statebaddata=statebaddata, stateconnfail=stateconnfail, stateok=stateok, statereadfail=statereadfail, statetimeout=statetimeout, stateunexpected=stateunexpected, statewritefail=statewritefail, sslhwfail=sslhwfail, sslhwrestart=sslhwrestart, sslhwstart=sslhwstart, confdel=confdel, confmod=confmod, confadd=confadd, confok=confok, javadied=javadied, javastop=javastop, javastartfail=javastartfail, javaterminatefail=javaterminatefail, javanotfound=javanotfound, javastarted=javastarted, servleterror=servleterror, monitorfail=monitorfail, monitorok=monitorok, rulexmlerr=rulexmlerr, pooluseunknown=pooluseunknown, ruleabort=ruleabort, rulebufferlarge=rulebufferlarge, rulebodycomperror=rulebodycomperror, forwardproxybadhost=forwardproxybadhost, invalidemit=invalidemit, rulenopersistence=rulenopersistence, rulelogmsginfo=rulelogmsginfo, rulelogmsgwarn=rulelogmsgwarn, rulelogmsgserious=rulelogmsgserious, norate=norate, poolactivenodesunknown=poolactivenodesunknown, datastorefull=datastorefull, expired=expired, licensecorrupt=licensecorrupt, expiresoon=expiresoon, usinglicense=usinglicense, licenseclustertoobig=licenseclustertoobig, unlicensed=unlicensed, usingdevlicense=usingdevlicense, poolnonodes=poolnonodes, poolok=poolok, pooldied=pooldied, noderesolvefailure=noderesolvefailure, noderesolvemultiple=noderesolvemultiple, nodeworking=nodeworking, nostarttls=nostarttls, nodefail=nodefail, starttlsinvalid=starttlsinvalid, ehloinvalid=ehloinvalid, flipperraiselocalworking=flipperraiselocalworking, flipperraiseothersdead=flipperraiseothersdead, flipperraiseosdrop=flipperraiseosdrop, dropipinfo=dropipinfo, dropipwarn=dropipwarn, flipperdadreraise=flipperdadreraise, flipperipexists=flipperipexists, triggersummary=triggersummary, slmclasslimitexceeded=slmclasslimitexceeded, slmrecoveredwarn=slmrecoveredwarn, slmrecoveredserious=slmrecoveredserious, slmfallenbelowwarn=slmfallenbelowwarn, slmfallenbelowserious=slmfallenbelowserious, vscrloutofdate=vscrloutofdate, vsstart=vsstart, vsstop=vsstop, privkeyok=privkeyok, ssldrop=ssldrop, vslogwritefail=vslogwritefail, vssslcertexpired=vssslcertexpired, vssslcerttoexpire=vssslcerttoexpire, vscacertexpired=vscacertexpired, vscacerttoexpire=vscacerttoexpire, maxclientbufferdrop=maxclientbufferdrop, respcompfail=respcompfail, responsetoolarge=responsetoolarge, sipstreamnoports=sipstreamnoports, rtspstreamnoports=rtspstreamnoports, geodataloadfail=geodataloadfail, poolpersistencemismatch=poolpersistencemismatch, connerror=connerror, connfail=connfail, badcontentlen=badcontentlen, activatealldead=activatealldead, machinerecovered=machinerecovered, flipperrecovered=flipperrecovered, activatedautomatically=activatedautomatically, zclustermoderr=zclustermoderr, ec2flipperraiselocalworking=ec2flipperraiselocalworking, ec2flipperraiseothersdead=ec2flipperraiseothersdead, autherror=autherror, logfiledeleted=logfiledeleted, license_graceperiodexpired=license_graceperiodexpired, license_authorized=license_authorized, license_rejected_authorized=license_rejected_authorized, license_rejected_unauthorized=license_rejected_unauthorized, license_timedout_authorized=license_timedout_authorized, license_timedout_unauthorized=license_timedout_unauthorized, license_unauthorized=license_unauthorized, cachesizereduced=cachesizereduced, morememallowed=morememallowed, lessmemallowed=lessmemallowed, usedcredsdeleted=usedcredsdeleted)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", apistatusprocesshanging=apistatusprocesshanging, autonodedestroyed=autonodedestroyed, autoscalestatusupdateerror=autoscalestatusupdateerror, ec2iperr=ec2iperr, dropec2ipwarn=dropec2ipwarn, ec2nopublicip=ec2nopublicip, multihostload=multihostload, tpslimited=tpslimited, ssltpslimited=ssltpslimited, bwlimited=bwlimited, licensetoomanylocations=licensetoomanylocations, autonodedestructioncomplete=autonodedestructioncomplete, autonodeexisted=autonodeexisted, autoscaledpooltoosmall=autoscaledpooltoosmall, autoscaleinvalidargforcreatenode=autoscaleinvalidargforcreatenode, autonodedisappeared=autonodedisappeared, autoscaledpoolrefractory=autoscaledpoolrefractory, cannotshrinkemptypool=cannotshrinkemptypool, autoscalinghysteresiscantgrow=autoscalinghysteresiscantgrow, autonodecreationcomplete=autonodecreationcomplete, autonodestatuschange=autonodestatuschange, autoscalinghysteresiscantshrink=autoscalinghysteresiscantshrink, autoscalingpoolstatechange=autoscalingpoolstatechange, glbmissingips=glbmissingips, glbnolocations=glbnolocations, locationmonitorok=locationmonitorok, locationmonitorfail=locationmonitorfail, locationok=locationok, locationfail=locationfail, locationsoapok=locationsoapok, locationsoapfail=locationsoapfail, glbdeadlocmissingips=glbdeadlocmissingips, autoscaleresponseparseerror=autoscaleresponseparseerror, glbnewmaster=glbnewmaster, glblogwritefail=glblogwritefail, glbfailalter=glbfailalter, autoscalednodecontested=autoscalednodecontested, autoscalepoolconfupdate=autoscalepoolconfupdate, autonodecreationstarted=autonodecreationstarted, autoscaleinvalidargfordeletenode=autoscaleinvalidargfordeletenode, autoscalinghitroof=autoscalinghitroof, autoscalinghitfloor=autoscalinghitfloor, apichangeprocesshanging=apichangeprocesshanging, autoscaledpooltoobig=autoscaledpooltoobig, autoscalingprocesstimedout=autoscalingprocesstimedout, autoscalingdisabled=autoscalingdisabled, locmovemachine=locmovemachine, locempty=locempty, autoscalinglicenseerror=autoscalinglicenseerror, autoscalinglicenseenabled=autoscalinglicenseenabled, autoscalinglicensedisabled=autoscalinglicensedisabled, confreptimeout=confreptimeout, confrepfailed=confrepfailed, analyticslicenseenabled=analyticslicenseenabled, analyticslicensedisabled=analyticslicensedisabled, autoscalingchangeprocessfailure=autoscalingchangeprocessfailure, autoscalewrongimageid=autoscalewrongimageid, autoscalewrongname=autoscalewrongname, autoscalewrongsizeid=autoscalewrongsizeid, logdiskoverload=logdiskoverload, logdiskfull=logdiskfull, autoscalingresuscitatepool=autoscalingresuscitatepool, zxtmhighload=zxtmhighload, glbservicedied=glbservicedied, glbserviceok=glbserviceok, license_rejected_unauthorized_ts=license_rejected_unauthorized_ts, license_authorized_ts=license_authorized_ts, license_rejected_authorized_ts=license_rejected_authorized_ts, license_timedout_authorized_ts=license_timedout_authorized_ts, license_timedout_unauthorized_ts=license_timedout_unauthorized_ts, license_graceperiodexpired_ts=license_graceperiodexpired_ts, flipperraiseremotedropped=flipperraiseremotedropped, sslrehandshakemininterval=sslrehandshakemininterval, sslhandshakemsgsizelimit=sslhandshakemsgsizelimit, sslcrltoobig=sslcrltoobig, numpools_exceeded=numpools_exceeded, numlocations_exceeded=numlocations_exceeded, numtipg_exceeded=numtipg_exceeded, numnodes_exceeded=numnodes_exceeded, ec2nosecondaryprivateip=ec2nosecondaryprivateip, ec2vpceipassocerr=ec2vpceipassocerr, ec2vpciderr=ec2vpciderr, license_explicitlydisabled_ts=license_explicitlydisabled_ts, rulestreamerrortoomuch=rulestreamerrortoomuch, rulestreamerrornotenough=rulestreamerrornotenough, rulestreamerrorprocessfailure=rulestreamerrorprocessfailure, rulestreamerrornotstarted=rulestreamerrornotstarted, rulestreamerrornotfinished=rulestreamerrornotfinished, rulestreamerrorinternal=rulestreamerrorinternal, rulestreamerrorgetresponse=rulestreamerrorgetresponse, rulesinvalidrequestbody=rulesinvalidrequestbody, serviceruleabort=serviceruleabort, servicerulelocunknown=servicerulelocunknown, servicerulelocnotconfigured=servicerulelocnotconfigured, servicerulelocdead=servicerulelocdead, aptimizeuseunknownprofile=aptimizeuseunknownprofile, aptimizedisabled=aptimizedisabled, aptimizeuseunknownscope=aptimizeuseunknownscope, childcommsfail=childcommsfail, childhung=childhung, childkilled=childkilled, datalocalstorefull=datalocalstorefull, fipsfailinit=fipsfailinit, fipsfailops=fipsfailops, clocknotmonotonic=clocknotmonotonic, clockjump=clockjump, rebootrequired=rebootrequired, ocspstaplingfail=ocspstaplingfail, ocspstaplingnomem=ocspstaplingnomem, appliance=appliance, pingsendfail=pingsendfail, autonodenopublicip=autonodenopublicip, ocspstaplingrevoked=ocspstaplingrevoked, ocspstaplingunknown=ocspstaplingunknown, ocspstaplingunrevoked=ocspstaplingunrevoked, ruleoverrun=ruleoverrun, appfirewallcontrolstarted=appfirewallcontrolstarted, autonoderemoved=autonoderemoved, routingswoperational=routingswoperational, routingswfailurelimitreached=routingswfailurelimitreached, routingswfailed=routingswfailed, routingswstartfailed=routingswstartfailed, appfirewallcontrolstopped=appfirewallcontrolstopped, appfirewallcontrolrestarted=appfirewallcontrolrestarted, appfirewallcontroltimeout=appfirewallcontroltimeout, appfirewallcontrolerror=appfirewallcontrolerror, ospfneighborsok=ospfneighborsok)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", ospfneighborsdegraded=ospfneighborsdegraded, ospfneighborsfailed=ospfneighborsfailed, nameserverunavailable=nameserverunavailable, nameserveravailable=nameserveravailable, autoscaleresolvefailure=autoscaleresolvefailure, glbtoomanylocations=glbtoomanylocations, dnszonevalidate=dnszonevalidate, dnszonecreaterecord=dnszonecreaterecord, dnszoneparsechild=dnszoneparsechild, dnserroraddzone=dnserroraddzone, dnsaddzone=dnsaddzone, dnszoneparse=dnszoneparse, ec2dataretrievalfailed=ec2dataretrievalfailed, ec2dataretrievalsuccessful=ec2dataretrievalsuccessful, dnszonedelete=dnszonedelete, dnserrordeletezone=dnserrordeletezone)

# Groups
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", mainGroup=mainGroup, deprecatedGroup=deprecatedGroup, obsoleteGroup=obsoleteGroup, notificationGroup=notificationGroup, obsoleteNotificationGroup=obsoleteNotificationGroup, deprecatedNotificationGroup=deprecatedNotificationGroup)

# Compliances
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", compliance=compliance, deprecatedCompliance=deprecatedCompliance, obsoleteCompliance=obsoleteCompliance)
