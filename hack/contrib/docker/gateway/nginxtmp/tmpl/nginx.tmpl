{{ if .User }} user {{.User}};{{ end }}
worker_processes  {{.WorkerProcesses}};
error_log  {{.ErrorLog}};
worker_rlimit_nofile {{.WorkerRlimitNofile}};

events {
    {{ if .Events.EnableEpoll }}use epoll;{{ end }}
    {{ if .Events.EnableMultiAccept }}multi_accept on;{{ end }}
    worker_connections  {{.Events.WorkerConnections}};
}

{{ $h := .HTTP }}
http {
    lua_package_path "/run/nginxtmp/lua/lua-resty-balancer/lib/?.lua;;";
    lua_package_cpath "/run/nginxtmp/lua/lua-resty-balancer/?.so;;";

    include mime.types;
    default_type  {{$h.DefaultType}};

    {{ if $h.SendFile }}
    sendfile        on;
    {{ end }}

    keepalive_timeout  {{$h.KeepaliveTimeout.Num}}{{$h.KeepaliveTimeout.Unit}};

    {{ if gt $h.ClientMaxBodySize.Num 0 }}
    client_max_body_size {{$h.ClientMaxBodySize.Num}}{{$h.ClientMaxBodySize.Unit}};
    {{ end }}
    {{ if gt $h.ClientBodyBufferSize.Num 0 }}
    client_body_buffer_size   {{$h.ClientBodyBufferSize.Num}}{{$h.ClientBodyBufferSize.Unit}};
    {{ end }}
    {{ if gt $h.ProxyConnectTimeout.Num 0 }}
    proxy_connect_timeout   {{$h.ProxyConnectTimeout.Num}}{{$h.ProxyConnectTimeout.Unit}};
    {{ end }}
    {{ if gt $h.ProxySendTimeout.Num 0 }}
    proxy_send_timeout      {{$h.ProxySendTimeout.Num}}{{$h.ProxySendTimeout.Unit}};
    {{ end }}
    {{ if gt $h.ProxySendTimeout.Num 0 }}
    proxy_read_timeout      {{$h.ProxyReadTimeout.Num}}{{$h.ProxyReadTimeout.Unit}};
    {{ end }}
    {{ if gt $h.ProxyBufferSize.Num 0}}
    proxy_buffer_size       {{$h.ProxyBufferSize.Num}}{{$h.ProxyBufferSize.Unit}};
    {{ end }}
    {{ if gt $h.ProxyBuffers.Num 0}}
    proxy_buffers           4 {{$h.ProxyBuffers.Num}}{{$h.ProxyBuffers.Unit}};
    {{ end }}
    {{ if gt $h.ProxyBusyBuffersSize.Num 0 }}
    proxy_busy_buffers_size   {{$h.ProxyBusyBuffersSize.Num}}{{$h.ProxyBusyBuffersSize.Unit}};
    {{ end }}

    gzip              on;
    gzip_min_length   1k;
    gzip_buffers      4 16k;
    gzip_http_version 1.0;
    gzip_comp_level   6;
    gzip_types        text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary         on;

    server_names_hash_bucket_size 512;

    lua_shared_dict upstreams_dict {{$h.UpstreamsDict.Num}}{{$h.UpstreamsDict.Unit}};

    server {
        listen 80 default_server;
        server_name _;
        return 404;
    }

    server {
        listen       {{$h.AuxiliaryPort}};

        location /healthz {
            return 200 "ok";
        }

        location /list-upstreams {
            content_by_lua_block {
                local balancer = require "ngx.balancer"
                local cjson = require("cjson")
                local keys = ngx.shared.upstreams_dict:get_keys()
                for _, name in pairs(keys) do
                    local servers = ngx.shared.upstreams_dict:get(name)
                    ngx.print(name..": ")
                    ngx.print(cjson.encode(servers))
                    ngx.print("\n")
                end
            }
        }

        include update-ups.conf;

        location /delete-upstreams {
            content_by_lua_block {
                local cjson = require("cjson")
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                local tbl = cjson.decode(data)
                for _, name in pairs(tbl) do
                    ngx.shared.upstreams_dict:delete(name)
                end
            }
        }
    }

    include conf/http/*.conf;
}

stream {
    include conf/stream/*.conf;
}
